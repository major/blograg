{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "myfile",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 2514824455589234388,
    "filename": "myfile.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/texts/1"
      },
      {
        "$ref": "#/texts/2"
      },
      {
        "$ref": "#/texts/3"
      },
      {
        "$ref": "#/texts/4"
      },
      {
        "$ref": "#/texts/5"
      },
      {
        "$ref": "#/texts/6"
      },
      {
        "$ref": "#/texts/7"
      },
      {
        "$ref": "#/texts/8"
      },
      {
        "$ref": "#/texts/9"
      },
      {
        "$ref": "#/texts/10"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/16"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/texts/30"
      },
      {
        "$ref": "#/texts/31"
      },
      {
        "$ref": "#/texts/32"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/texts/34"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/texts/38"
      },
      {
        "$ref": "#/texts/39"
      },
      {
        "$ref": "#/texts/40"
      },
      {
        "$ref": "#/texts/41"
      },
      {
        "$ref": "#/texts/42"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/texts/44"
      },
      {
        "$ref": "#/texts/45"
      },
      {
        "$ref": "#/texts/46"
      },
      {
        "$ref": "#/texts/47"
      },
      {
        "$ref": "#/texts/48"
      },
      {
        "$ref": "#/texts/49"
      },
      {
        "$ref": "#/texts/50"
      },
      {
        "$ref": "#/texts/51"
      },
      {
        "$ref": "#/texts/52"
      },
      {
        "$ref": "#/texts/53"
      },
      {
        "$ref": "#/texts/54"
      },
      {
        "$ref": "#/texts/55"
      },
      {
        "$ref": "#/texts/56"
      },
      {
        "$ref": "#/texts/57"
      },
      {
        "$ref": "#/texts/58"
      },
      {
        "$ref": "#/texts/59"
      },
      {
        "$ref": "#/texts/60"
      },
      {
        "$ref": "#/pictures/0"
      },
      {
        "$ref": "#/texts/61"
      },
      {
        "$ref": "#/texts/62"
      },
      {
        "$ref": "#/texts/63"
      },
      {
        "$ref": "#/texts/64"
      },
      {
        "$ref": "#/pictures/1"
      },
      {
        "$ref": "#/texts/65"
      },
      {
        "$ref": "#/texts/66"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/12"
        },
        {
          "$ref": "#/texts/13"
        },
        {
          "$ref": "#/texts/14"
        },
        {
          "$ref": "#/texts/15"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Everyone has an opinion for the best way to manage containers, and there are many contenders depending on how much complexity you can handle and how much automation you require. One of my favorite ways to manage containers is docker-compose .",
      "text": "Everyone has an opinion for the best way to manage containers, and there are many contenders depending on how much complexity you can handle and how much automation you require. One of my favorite ways to manage containers is docker-compose ."
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Overview of docker-compose",
      "text": "Overview of docker-compose",
      "level": 1
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "docker-compose uses a simple YAML syntax to explain what your desired end state should look like. The  compose specification  covers all of the relevant configurations for containers, volumes, networks, and more. After each change, docker-compose compares your configuration to the running containers and makes all of the required changes.",
      "text": "docker-compose uses a simple YAML syntax to explain what your desired end state should look like. The  compose specification  covers all of the relevant configurations for containers, volumes, networks, and more. After each change, docker-compose compares your configuration to the running containers and makes all of the required changes."
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This provides some advantages over using ",
      "text": "This provides some advantages over using "
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker run ...",
      "text": "docker run ...",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " or ",
      "text": " or "
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "podman run ...",
      "text": "podman run ...",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "since you can put the YAML into version control and track your configuration changes all in one place. I was tracking the configuration in shell scripts that ran ",
      "text": "since you can put the YAML into version control and track your configuration changes all in one place. I was tracking the configuration in shell scripts that ran "
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker",
      "text": "docker",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " with lots of parameters and that became difficult to manage.",
      "text": " with lots of parameters and that became difficult to manage."
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "What about Podman?",
      "text": "What about Podman?",
      "level": 1
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Podman  is a tool for managing containers, much like Docker, but it has some distinct advantages:",
      "text": "Podman  is a tool for managing containers, much like Docker, but it has some distinct advantages:"
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "No daemons are needed",
      "text": "No daemons are needed",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You can run containers as your user, or as root",
      "text": "You can run containers as your user, or as root",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "The commands and arguments are ",
      "text": "The commands and arguments are ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Podman 3 added a ",
      "text": "Podman 3 added a ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This last part, the Docker-compatible API is quite interesting and this allows docker-compose to work with podman as well as it does with docker.",
      "text": "This last part, the Docker-compatible API is quite interesting and this allows docker-compose to work with podman as well as it does with docker."
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's try it out!",
      "text": "Let's try it out!"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Getting everything ready",
      "text": "Getting everything ready",
      "level": 1
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Start with a working Fedora 34 system and install some packages:",
      "text": "Start with a working Fedora 34 system and install some packages:"
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "\ud83d\udca3  HEADS UP:  The ",
      "text": "\ud83d\udca3  HEADS UP:  The "
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "podman-docker",
      "text": "podman-docker",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " package brings in podman, an alias for the",
      "text": " package brings in podman, an alias for the"
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker",
      "text": "docker",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " command that actually runs ",
      "text": " command that actually runs "
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "podman",
      "text": "podman",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ", and the docker-compatible API via a socket. If you want to run podman and docker side by side on the same machine, install ",
      "text": ", and the docker-compatible API via a socket. If you want to run podman and docker side by side on the same machine, install "
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "podman",
      "text": "podman",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " instead of ",
      "text": " instead of "
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "podman-docker",
      "text": "podman-docker",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " here. If you had docker installed already, you may need to remove it with ",
      "text": " here. If you had docker installed already, you may need to remove it with "
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "dnf remove docker-ce docker-ce-cli",
      "text": "dnf remove docker-ce docker-ce-cli",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ".",
      "text": "."
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "dnf install docker-compose podman-docker",
      "text": "dnf install docker-compose podman-docker",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We're going to do something different here. Intead of starting the podman socket or docker daemon as root, we're going to start the podman socket as a regular user. Switch to a regular user and start the socket:",
      "text": "We're going to do something different here. Intead of starting the podman socket or docker daemon as root, we're going to start the podman socket as a regular user. Switch to a regular user and start the socket:"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ systemctl enable --now --user podman.socket\nCreated symlink /home/major/.config/systemd/user/sockets.target.wants/podman.socket \u2192 /usr/lib/systemd/user/podman.socket.",
      "text": "$ systemctl enable --now --user podman.socket\nCreated symlink /home/major/.config/systemd/user/sockets.target.wants/podman.socket \u2192 /usr/lib/systemd/user/podman.socket.",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "But wait, where's the socket?",
      "text": "But wait, where's the socket?"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ ls -al $XDG_RUNTIME_DIR/podman/podman.sock\nsrw-rw----. 1 major major 0 Jul  9 16:49 /run/user/1000/podman/podman.sock",
      "text": "$ ls -al $XDG_RUNTIME_DIR/podman/podman.sock\nsrw-rw----. 1 major major 0 Jul  9 16:49 /run/user/1000/podman/podman.sock",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "That's a podman socket running as my user and exposing a docker-compatible API. \ud83c\udf89",
      "text": "That's a podman socket running as my user and exposing a docker-compatible API. \ud83c\udf89"
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Time for docker-compose",
      "text": "Time for docker-compose",
      "level": 1
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Now it's time to use docker-compose with podman as a regular user and run a container as our regular user.",
      "text": "Now it's time to use docker-compose with podman as a regular user and run a container as our regular user."
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We can use  librespeed  for this example, and the  LinuxServer librespeed container  is a great way to deploy it. It's a self-hosted speed test application that works well with desktops and mobile devices.",
      "text": "We can use  librespeed  for this example, and the  LinuxServer librespeed container  is a great way to deploy it. It's a self-hosted speed test application that works well with desktops and mobile devices."
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "First, we begin with the suggested docker-compose configuration:",
      "text": "First, we begin with the suggested docker-compose configuration:"
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "---\nversion: \"2.1\"\nservices:\n  librespeed:\n    image: ghcr.io/linuxserver/librespeed\n    container_name: librespeed\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Etc/UTC\n    volumes:\n      - librespeed:/config\n    ports:\n      - 8080:80\n    restart: unless-stopped\n\nvolumes:\n  librespeed: {}",
      "text": "---\nversion: \"2.1\"\nservices:\n  librespeed:\n    image: ghcr.io/linuxserver/librespeed\n    container_name: librespeed\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Etc/UTC\n    volumes:\n      - librespeed:/config\n    ports:\n      - 8080:80\n    restart: unless-stopped\n\nvolumes:\n  librespeed: {}",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Save that as ",
      "text": "Save that as "
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker-compose.yml",
      "text": "docker-compose.yml",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " in your current directory.",
      "text": " in your current directory."
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Keep in mind that docker-compose is expecting to find our docker socket in",
      "text": "Keep in mind that docker-compose is expecting to find our docker socket in"
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/var/run/docker.sock",
      "text": "/var/run/docker.sock",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ", but we're running the podman socket as our regular user. Let's export the ",
      "text": ", but we're running the podman socket as our regular user. Let's export the "
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "DOCKER_HOST",
      "text": "DOCKER_HOST",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " variable and run docker-compose to bring up our new container:",
      "text": " variable and run docker-compose to bring up our new container:"
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ export DOCKER_HOST=\"unix:$XDG_RUNTIME_DIR/podman/podman.sock\"\n$ docker-compose up -d\nPulling librespeed (ghcr.io/linuxserver/librespeed:)...\n10f45b17b9ab: Download complete\nf23b92877416: Download complete\na5bf9c523af4: Download complete\n00fe9b963179: Download complete\nbfafa0ba1dc9: Download complete\nc583b34264f1: Download complete\n9d26cce56b8d: Download complete\n70de87880afd: Download complete\n0ad6c2578069: Download complete\na8792749de3b: Download complete\n2d31530d2d8b: Download complete\nCreating librespeed ... done\n$ docker-compose ps\n   Name      Command   State       Ports\n--------------------------------------------\nlibrespeed   /init     Up ()   :8080->80/tcp",
      "text": "$ export DOCKER_HOST=\"unix:$XDG_RUNTIME_DIR/podman/podman.sock\"\n$ docker-compose up -d\nPulling librespeed (ghcr.io/linuxserver/librespeed:)...\n10f45b17b9ab: Download complete\nf23b92877416: Download complete\na5bf9c523af4: Download complete\n00fe9b963179: Download complete\nbfafa0ba1dc9: Download complete\nc583b34264f1: Download complete\n9d26cce56b8d: Download complete\n70de87880afd: Download complete\n0ad6c2578069: Download complete\na8792749de3b: Download complete\n2d31530d2d8b: Download complete\nCreating librespeed ... done\n$ docker-compose ps\n   Name      Command   State       Ports\n--------------------------------------------\nlibrespeed   /init     Up ()   :8080->80/tcp",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The container is up and running as our user. Let's check the ",
      "text": "The container is up and running as our user. Let's check the "
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "nginx",
      "text": "nginx",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " process inside the container to be sure:",
      "text": " process inside the container to be sure:"
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ ps -xu |grep \"nginx: master\"\nmajor       3805  0.0  0.4   5860  4692 ?        Ss   16:53   0:00 nginx: master process /usr/sbin/nginx -c /config/nginx/nginx.conf",
      "text": "$ ps -xu |grep \"nginx: master\"\nmajor       3805  0.0  0.4   5860  4692 ?        Ss   16:53   0:00 nginx: master process /usr/sbin/nginx -c /config/nginx/nginx.conf",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Sweet! \ud83e\udd73",
      "text": "Sweet! \ud83e\udd73"
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Time for a speed test",
      "text": "Time for a speed test",
      "level": 1
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If we've come this far, we might as well test our internet speed to ensure the container works!",
      "text": "If we've come this far, we might as well test our internet speed to ensure the container works!"
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "caption",
      "prov": [],
      "orig": "Librespeed speed test interface before testing",
      "text": "Librespeed speed test interface before testing"
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "2021-07-09-speedtest-prior.png",
      "text": "2021-07-09-speedtest-prior.png"
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Remember that we used port 8080 as a replacement for 80 in our docker-compose file to avoid issues with regular users being denied access to create a listener on ports under 1024.",
      "text": "Remember that we used port 8080 as a replacement for 80 in our docker-compose file to avoid issues with regular users being denied access to create a listener on ports under 1024."
    },
    {
      "self_ref": "#/texts/63",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's see how fast my connection is today:",
      "text": "Let's see how fast my connection is today:"
    },
    {
      "self_ref": "#/texts/64",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "caption",
      "prov": [],
      "orig": "Librespeed speed test interface after testing",
      "text": "Librespeed speed test interface after testing"
    },
    {
      "self_ref": "#/texts/65",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "2021-07-09-speedtest-prior.png",
      "text": "2021-07-09-speedtest-prior.png"
    },
    {
      "self_ref": "#/texts/66",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Photo credit:  Michael D Beckwith on Unsplash",
      "text": "Photo credit:  Michael D Beckwith on Unsplash"
    }
  ],
  "pictures": [
    {
      "self_ref": "#/pictures/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "picture",
      "prov": [],
      "captions": [
        {
          "$ref": "#/texts/60"
        }
      ],
      "references": [],
      "footnotes": [],
      "annotations": []
    },
    {
      "self_ref": "#/pictures/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "picture",
      "prov": [],
      "captions": [
        {
          "$ref": "#/texts/64"
        }
      ],
      "references": [],
      "footnotes": [],
      "annotations": []
    }
  ],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}