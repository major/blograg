{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "index",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 12961231464528342846,
    "filename": "index.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/8"
      },
      {
        "$ref": "#/texts/9"
      },
      {
        "$ref": "#/texts/10"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/texts/13"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/pictures/0"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/texts/30"
      },
      {
        "$ref": "#/texts/31"
      },
      {
        "$ref": "#/texts/32"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/texts/34"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/groups/2"
      },
      {
        "$ref": "#/texts/42"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/texts/44"
      },
      {
        "$ref": "#/texts/45"
      },
      {
        "$ref": "#/texts/46"
      },
      {
        "$ref": "#/texts/47"
      },
      {
        "$ref": "#/texts/48"
      },
      {
        "$ref": "#/texts/49"
      },
      {
        "$ref": "#/texts/50"
      },
      {
        "$ref": "#/texts/51"
      },
      {
        "$ref": "#/texts/52"
      },
      {
        "$ref": "#/texts/53"
      },
      {
        "$ref": "#/texts/54"
      },
      {
        "$ref": "#/texts/55"
      },
      {
        "$ref": "#/texts/56"
      },
      {
        "$ref": "#/texts/57"
      },
      {
        "$ref": "#/texts/58"
      },
      {
        "$ref": "#/texts/59"
      },
      {
        "$ref": "#/texts/60"
      },
      {
        "$ref": "#/pictures/1"
      },
      {
        "$ref": "#/texts/61"
      },
      {
        "$ref": "#/texts/62"
      },
      {
        "$ref": "#/texts/63"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/1"
        },
        {
          "$ref": "#/texts/2"
        },
        {
          "$ref": "#/texts/3"
        },
        {
          "$ref": "#/texts/4"
        },
        {
          "$ref": "#/texts/5"
        },
        {
          "$ref": "#/texts/6"
        },
        {
          "$ref": "#/texts/7"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/14"
        },
        {
          "$ref": "#/texts/15"
        },
        {
          "$ref": "#/texts/16"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "ordered_list"
    },
    {
      "self_ref": "#/groups/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/38"
        },
        {
          "$ref": "#/texts/39"
        },
        {
          "$ref": "#/texts/40"
        },
        {
          "$ref": "#/texts/41"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "aliases:",
      "text": "aliases:"
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "/2022/11/11/adventures-with-the-mastodon-herd/",
      "text": "/2022/11/11/adventures-with-the-mastodon-herd/",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "containers",
      "text": "containers",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "docker",
      "text": "docker",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "mastodon",
      "text": "mastodon",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "postgres",
      "text": "postgres",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "redis",
      "text": "redis",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "twitter",
      "text": "twitter",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "All of the recent changes at Twitter inspired me to take a second look at  mastodon . In short, mastodon is a federated social network that feels a bit like someone took Twitter and split it up into a vast network of independent servers.",
      "text": "All of the recent changes at Twitter inspired me to take a second look at  mastodon . In short, mastodon is a federated social network that feels a bit like someone took Twitter and split it up into a vast network of independent servers."
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Why mastodon?",
      "text": "Why mastodon?"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "It feels a lot like Twitter, but better.",
      "text": "It feels a lot like Twitter, but better."
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You can search for people, follow them, and publish messages (called  toots ). They can also follow you and see the messages you publish.",
      "text": "You can search for people, follow them, and publish messages (called  toots ). They can also follow you and see the messages you publish."
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The big difference is that you don't join a central server with mastodon. There's a massive network of servers to choose from and you can create accounts on one or more of those servers to get started. You can even run your own!",
      "text": "The big difference is that you don't join a central server with mastodon. There's a massive network of servers to choose from and you can create accounts on one or more of those servers to get started. You can even run your own!"
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Mastodon reminds me of email for many reasons:",
      "text": "Mastodon reminds me of email for many reasons:"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "There's no central server. You join a server (from the ",
      "text": "There's no central server. You join a server (from the ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Everything is on an eventual consistency model. If a mastodon server goes offline for",
      "text": "Everything is on an eventual consistency model. If a mastodon server goes offline for",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You can follow people on your server or on other servers. You choose who to mute or",
      "text": "You can follow people on your server or on other servers. You choose who to mute or",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "After joining the  fosstodon.org  server, I noticed that it was really easy to begin following people and get messages. I reconnected with people that I had not heard from in a very long time!",
      "text": "After joining the  fosstodon.org  server, I noticed that it was really easy to begin following people and get messages. I reconnected with people that I had not heard from in a very long time!"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Migrating from Twitter",
      "text": "Migrating from Twitter"
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "One of my first questions after joining mastodon was: \"How do I find the people I follow on Twitter?\"",
      "text": "One of my first questions after joining mastodon was: \"How do I find the people I follow on Twitter?\""
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Many Twitter users are adding their mastodon accounts to their bio to make them easier to find on mastodon. For example, I added my mastodon account,  @major@fosstodon.org , to my  twitter bio :",
      "text": "Many Twitter users are adding their mastodon accounts to their bio to make them easier to find on mastodon. For example, I added my mastodon account,  @major@fosstodon.org , to my  twitter bio :"
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "caption",
      "prov": [],
      "orig": "Twitter bio showing off my mastodon link",
      "text": "Twitter bio showing off my mastodon link"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "twitter_bio.png",
      "text": "twitter_bio.png"
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Adding this to your bio makes it easier for people to find you via some helpful tools. I used  debirdify  to look through my Twitter account for mastodon handles of the people I follow. Within seconds, it provided links to about 15 mastodon accounts and offered me a CSV that I could directly import into my mastodon server. \ud83c\udf89 (Mastodon servers have some awesome import and export capabilities.)",
      "text": "Adding this to your bio makes it easier for people to find you via some helpful tools. I used  debirdify  to look through my Twitter account for mastodon handles of the people I follow. Within seconds, it provided links to about 15 mastodon accounts and offered me a CSV that I could directly import into my mastodon server. \ud83c\udf89 (Mastodon servers have some awesome import and export capabilities.)"
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I've also heard good things about  Fedifinder  and  Twitodon  for helping you find Twitter friends on mastodon. There's a  helpful article on Wired  with more suggestions.",
      "text": "I've also heard good things about  Fedifinder  and  Twitodon  for helping you find Twitter friends on mastodon. There's a  helpful article on Wired  with more suggestions."
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Apps",
      "text": "Apps"
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I'm neck-deep in the Android ecosystem, so most of my suggestions here are for Android devices. I tried the  main mastodon app  first. It looks great, updates quickly, and is very easy to use. However, inserting GIFs into toots became really frustrating (although I hear that's being fixed).",
      "text": "I'm neck-deep in the Android ecosystem, so most of my suggestions here are for Android devices. I tried the  main mastodon app  first. It looks great, updates quickly, and is very easy to use. However, inserting GIFs into toots became really frustrating (although I hear that's being fixed)."
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I moved to  Tusky  and it's my go-to mastodon app. You can add multiple accounts, posting media is incredibly easy, and it has tons of configuration knobs everywhere.",
      "text": "I moved to  Tusky  and it's my go-to mastodon app. You can add multiple accounts, posting media is incredibly easy, and it has tons of configuration knobs everywhere."
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "There are various desktop applications for mastodon, but the web interface is good enough for me! The default web interface looks a lot like Twitter with a big timeline running down the middle and section links on the right.",
      "text": "There are various desktop applications for mastodon, but the web interface is good enough for me! The default web interface looks a lot like Twitter with a big timeline running down the middle and section links on the right."
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "However, I use Tweetdeck with Twitter and I wanted something similar on mastodon. Go into the settings for the web application, and choose  Appearance . Click  Enable advanced web interface , save the changes, and click  Back to Mastodon . Enjoy your Tweetdeck-like multi-column interface! \u2728",
      "text": "However, I use Tweetdeck with Twitter and I wanted something similar on mastodon. Go into the settings for the web application, and choose  Appearance . Click  Enable advanced web interface , save the changes, and click  Back to Mastodon . Enjoy your Tweetdeck-like multi-column interface! \u2728"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Run your own instance",
      "text": "Run your own instance"
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The federated nature of mastodon means you can run your own single user instance if you want! Buy a domain you like (or use a subdomain off an existing domain) and deploy!",
      "text": "The federated nature of mastodon means you can run your own single user instance if you want! Buy a domain you like (or use a subdomain off an existing domain) and deploy!"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The upstream repository has a  helm chart  which works well with kubernetes. Also, there's a  docker-compose  file which works well for smaller deployments.",
      "text": "The upstream repository has a  helm chart  which works well with kubernetes. Also, there's a  docker-compose  file which works well for smaller deployments."
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I went the docker-compose route on a small cloud instance at Hetzner, but I modified the upstream ",
      "text": "I went the docker-compose route on a small cloud instance at Hetzner, but I modified the upstream "
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker-compose.yml",
      "text": "docker-compose.yml",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ":",
      "text": ":"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "version: '3'\nvolumes:\n  certs:\n  postgres:\n  redis:\n  mastodon:\nservices:\n  traefik:\n    image: docker.io/library/traefik:latest\n    container_name: traefik\n    restart: unless-stopped\n    command:\n      # Tell Traefik to discover containers using the Docker API\n      - --providers.docker=true\n      - --providers.docker.exposedbydefault=false\n      # Enable the Trafik dashboard\n      - --api.dashboard=true\n      # Set up LetsEncrypt\n      #- --certificatesresolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory\n      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true\n      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=porkbun\n      - --certificatesresolvers.letsencrypt.acme.email=major@mhtx.net\n      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json\n      # Set up an insecure listener that redirects all traffic to TLS\n      - --entrypoints.web.address=:80\n      - --entrypoints.web.http.redirections.entrypoint.to=websecure\n      - --entrypoints.web.http.redirections.entrypoint.scheme=https\n      - --entrypoints.websecure.address=:443\n      # Set up the TLS configuration for our websecure listener\n      - --entrypoints.websecure.http.tls=true\n      - --entrypoints.websecure.http.tls.certResolver=letsencrypt\n      - --entrypoints.websecure.http.tls.domains[0].main=toots.cloud\n      - --entrypoints.websecure.http.tls.domains[0].sans=*.toots.cloud\n    environment:\n      - PORKBUN_SECRET_API_KEY=*****\n      - PORKBUN_API_KEY=*****\n    ports:\n      - '80:80'\n      - '443:443'\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - certs:/letsencrypt\n    labels:\n      - \"traefik.enable=true\"\n      - 'traefik.http.routers.traefik.rule=Host(`traefik.toots.cloud`)'\n      - \"traefik.http.routers.traefik.entrypoints=websecure\"\n      - \"traefik.http.routers.traefik.tls.certresolver=letsencrypt\"\n      - \"traefik.http.routers.traefik.service=api@internal\"\n      - 'traefik.http.routers.traefik.middlewares=strip'\n      - 'traefik.http.middlewares.strip.stripprefix.prefixes=/traefik'\n\n  postgres:\n    container_name: postgres\n    restart: always\n    image: docker.io/library/postgres:14-alpine\n    shm_size: 256mb\n    env_file: .env.production\n    healthcheck:\n      test: ['CMD', 'pg_isready', '-U', 'postgres']\n    volumes:\n      - postgres:/var/lib/postgresql/data\n      - ./postgres-setup.sh:/docker-entrypoint-initdb.d/init-user-db.sh:Z\n    environment:\n      - 'POSTGRES_HOST_AUTH_METHOD=trust'\n\n  redis:\n    container_name: redis\n    restart: always\n    image: docker.io/library/redis:7-alpine\n    healthcheck:\n      test: ['CMD', 'redis-cli', 'ping']\n    volumes:\n      - redis:/data\n\n  web:\n    container_name: web\n    image: docker.io/tootsuite/mastodon:v3.5.3\n    restart: always\n    env_file: .env.production\n    command: bash -c \"rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000\"\n    healthcheck:\n      # prettier-ignore\n      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']\n    ports:\n      - '3000'\n    depends_on:\n      - postgres\n      - redis\n    volumes:\n      - mastodon:/mastodon/public/system\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.web.rule=Host(`toots.cloud`)\"\n      - \"traefik.http.routers.web.entrypoints=websecure\"\n      - \"traefik.http.routers.web.tls.certresolver=letsencrypt\"\n\n  streaming:\n    container_name: streaming\n    image: docker.io/tootsuite/mastodon:v3.5.3\n    restart: always\n    env_file: .env.production\n    command: node ./streaming\n    healthcheck:\n      # prettier-ignore\n      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']\n    ports:\n      - '4000'\n    depends_on:\n      - postgres\n      - redis\n\n  sidekiq:\n    container_name: sidekiq\n    image: docker.io/tootsuite/mastodon:v3.5.3\n    restart: always\n    env_file: .env.production\n    command: bundle exec sidekiq\n    depends_on:\n      - postgres\n      - redis\n    volumes:\n      - mastodon:/mastodon/public/system\n    healthcheck:\n      test: ['CMD-SHELL', \"ps aux | grep '[s]idekiq\\ 6' || false\"]",
      "text": "version: '3'\nvolumes:\n  certs:\n  postgres:\n  redis:\n  mastodon:\nservices:\n  traefik:\n    image: docker.io/library/traefik:latest\n    container_name: traefik\n    restart: unless-stopped\n    command:\n      # Tell Traefik to discover containers using the Docker API\n      - --providers.docker=true\n      - --providers.docker.exposedbydefault=false\n      # Enable the Trafik dashboard\n      - --api.dashboard=true\n      # Set up LetsEncrypt\n      #- --certificatesresolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory\n      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true\n      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=porkbun\n      - --certificatesresolvers.letsencrypt.acme.email=major@mhtx.net\n      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json\n      # Set up an insecure listener that redirects all traffic to TLS\n      - --entrypoints.web.address=:80\n      - --entrypoints.web.http.redirections.entrypoint.to=websecure\n      - --entrypoints.web.http.redirections.entrypoint.scheme=https\n      - --entrypoints.websecure.address=:443\n      # Set up the TLS configuration for our websecure listener\n      - --entrypoints.websecure.http.tls=true\n      - --entrypoints.websecure.http.tls.certResolver=letsencrypt\n      - --entrypoints.websecure.http.tls.domains[0].main=toots.cloud\n      - --entrypoints.websecure.http.tls.domains[0].sans=*.toots.cloud\n    environment:\n      - PORKBUN_SECRET_API_KEY=*****\n      - PORKBUN_API_KEY=*****\n    ports:\n      - '80:80'\n      - '443:443'\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - certs:/letsencrypt\n    labels:\n      - \"traefik.enable=true\"\n      - 'traefik.http.routers.traefik.rule=Host(`traefik.toots.cloud`)'\n      - \"traefik.http.routers.traefik.entrypoints=websecure\"\n      - \"traefik.http.routers.traefik.tls.certresolver=letsencrypt\"\n      - \"traefik.http.routers.traefik.service=api@internal\"\n      - 'traefik.http.routers.traefik.middlewares=strip'\n      - 'traefik.http.middlewares.strip.stripprefix.prefixes=/traefik'\n\n  postgres:\n    container_name: postgres\n    restart: always\n    image: docker.io/library/postgres:14-alpine\n    shm_size: 256mb\n    env_file: .env.production\n    healthcheck:\n      test: ['CMD', 'pg_isready', '-U', 'postgres']\n    volumes:\n      - postgres:/var/lib/postgresql/data\n      - ./postgres-setup.sh:/docker-entrypoint-initdb.d/init-user-db.sh:Z\n    environment:\n      - 'POSTGRES_HOST_AUTH_METHOD=trust'\n\n  redis:\n    container_name: redis\n    restart: always\n    image: docker.io/library/redis:7-alpine\n    healthcheck:\n      test: ['CMD', 'redis-cli', 'ping']\n    volumes:\n      - redis:/data\n\n  web:\n    container_name: web\n    image: docker.io/tootsuite/mastodon:v3.5.3\n    restart: always\n    env_file: .env.production\n    command: bash -c \"rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000\"\n    healthcheck:\n      # prettier-ignore\n      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']\n    ports:\n      - '3000'\n    depends_on:\n      - postgres\n      - redis\n    volumes:\n      - mastodon:/mastodon/public/system\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.web.rule=Host(`toots.cloud`)\"\n      - \"traefik.http.routers.web.entrypoints=websecure\"\n      - \"traefik.http.routers.web.tls.certresolver=letsencrypt\"\n\n  streaming:\n    container_name: streaming\n    image: docker.io/tootsuite/mastodon:v3.5.3\n    restart: always\n    env_file: .env.production\n    command: node ./streaming\n    healthcheck:\n      # prettier-ignore\n      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']\n    ports:\n      - '4000'\n    depends_on:\n      - postgres\n      - redis\n\n  sidekiq:\n    container_name: sidekiq\n    image: docker.io/tootsuite/mastodon:v3.5.3\n    restart: always\n    env_file: .env.production\n    command: bundle exec sidekiq\n    depends_on:\n      - postgres\n      - redis\n    volumes:\n      - mastodon:/mastodon/public/system\n    healthcheck:\n      test: ['CMD-SHELL', \"ps aux | grep '[s]idekiq\\ 6' || false\"]",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Here are the main changes I made:",
      "text": "Here are the main changes I made:"
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Specified the exact URL/tag for each container",
      "text": "Specified the exact URL/tag for each container",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Added traefik to handle TLS",
      "text": "Added traefik to handle TLS",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Used named volumes instead of filesystem directories (made SELinux much happier)",
      "text": "Used named volumes instead of filesystem directories (made SELinux much happier)",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Added a provisioning script for postgres",
      "text": "Added a provisioning script for postgres",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The provisioning script for postgres allows me to bring up postgres without needing to run any extra commands:",
      "text": "The provisioning script for postgres allows me to bring up postgres without needing to run any extra commands:"
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "#!/bin/bash\nset -e\n\npsql -v ON_ERROR_STOP=1 --username postgres <<-EOSQL\n\tCREATE USER mastodon WITH PASSWORD 'super-secret-password' CREATEDB;\nEOSQL",
      "text": "#!/bin/bash\nset -e\n\npsql -v ON_ERROR_STOP=1 --username postgres <<-EOSQL\n\tCREATE USER mastodon WITH PASSWORD 'super-secret-password' CREATEDB;\nEOSQL",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Once you have all of this in place, run the usual ",
      "text": "Once you have all of this in place, run the usual "
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker-compose up -d",
      "text": "docker-compose up -d",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " and wait for everything to start. Then you can run through the initial mastodon setup:",
      "text": " and wait for everything to start. Then you can run through the initial mastodon setup:"
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ docker-compose run --rm web bundle exec rake mastodon:setup",
      "text": "$ docker-compose run --rm web bundle exec rake mastodon:setup",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You will need to answer lots of questions, including your domain name, postgres/redis details, email configuration, and object storage configuration. I use  Mailgun  for mastodon's email since it makes the setup much easier and has a very low cost. For object storage, I went with a public  Backblaze B2  bucket since it's Amazon S3 compatible but very inexpensive[^b2config].",
      "text": "You will need to answer lots of questions, including your domain name, postgres/redis details, email configuration, and object storage configuration. I use  Mailgun  for mastodon's email since it makes the setup much easier and has a very low cost. For object storage, I went with a public  Backblaze B2  bucket since it's Amazon S3 compatible but very inexpensive[^b2config]."
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "When the setup finishes, it will dump an environments file to the screen. Be sure to save that file. This will allow you to start up all of the containers again with the same configuration later. A copy of the environments file will be kept inside the container storage as well.",
      "text": "When the setup finishes, it will dump an environments file to the screen. Be sure to save that file. This will allow you to start up all of the containers again with the same configuration later. A copy of the environments file will be kept inside the container storage as well."
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "[^b2config]: Be sure to note the endpoint for your Backblaze bucket when you create it. You will need to specify that endpoint when you set up mastodon. As an example, my endpoint is ",
      "text": "[^b2config]: Be sure to note the endpoint for your Backblaze bucket when you create it. You will need to specify that endpoint when you set up mastodon. As an example, my endpoint is "
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "https://s3.us-west-001.backblazeb2.com",
      "text": "https://s3.us-west-001.backblazeb2.com",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " and my region is ",
      "text": " and my region is "
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "us-west-001",
      "text": "us-west-001",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ".",
      "text": "."
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Self-hosted instance takeaways",
      "text": "Self-hosted instance takeaways"
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I've been running my own mastodon instance for a few days and I'm not sure if I will keep it. Sure, I love having an instance on a hilarious domain like  toots.cloud  and having full control over my mastodon experience.",
      "text": "I've been running my own mastodon instance for a few days and I'm not sure if I will keep it. Sure, I love having an instance on a hilarious domain like  toots.cloud  and having full control over my mastodon experience."
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "But it's one more thing to manage, patch, and back up.",
      "text": "But it's one more thing to manage, patch, and back up."
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The fosstodon.org community has been excellent so far and I'm contributing to their costs each month via their  Patreon page . Every mastodon instance is going through growing pains recently due to really high demand.",
      "text": "The fosstodon.org community has been excellent so far and I'm contributing to their costs each month via their  Patreon page . Every mastodon instance is going through growing pains recently due to really high demand."
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The last count from the  Mastodon Users bot  shows massive interest:",
      "text": "The last count from the  Mastodon Users bot  shows massive interest:"
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "caption",
      "prov": [],
      "orig": "\ud83e\udd16 Mastodon user count bot",
      "text": "\ud83e\udd16 Mastodon user count bot"
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "mastodon_users.png",
      "text": "mastodon_users.png"
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If you're on a server that isn't performing well:  be patient .",
      "text": "If you're on a server that isn't performing well:  be patient ."
    },
    {
      "self_ref": "#/texts/63",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Ask for ways that you can help technically or financially. One of the biggest reminders that I get from mastodon is that every server is a  community . The community must come together to make each server successful as a part of the big fediverse.",
      "text": "Ask for ways that you can help technically or financially. One of the biggest reminders that I get from mastodon is that every server is a  community . The community must come together to make each server successful as a part of the big fediverse."
    }
  ],
  "pictures": [
    {
      "self_ref": "#/pictures/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "picture",
      "prov": [],
      "captions": [
        {
          "$ref": "#/texts/21"
        }
      ],
      "references": [],
      "footnotes": [],
      "annotations": []
    },
    {
      "self_ref": "#/pictures/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "picture",
      "prov": [],
      "captions": [
        {
          "$ref": "#/texts/60"
        }
      ],
      "references": [],
      "footnotes": [],
      "annotations": []
    }
  ],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}