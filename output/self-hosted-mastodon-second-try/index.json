{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "index",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 6696799987633917790,
    "filename": "index.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/4"
      },
      {
        "$ref": "#/texts/5"
      },
      {
        "$ref": "#/texts/6"
      },
      {
        "$ref": "#/texts/7"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/texts/13"
      },
      {
        "$ref": "#/texts/14"
      },
      {
        "$ref": "#/texts/15"
      },
      {
        "$ref": "#/groups/2"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/groups/3"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/groups/4"
      },
      {
        "$ref": "#/texts/39"
      },
      {
        "$ref": "#/texts/40"
      },
      {
        "$ref": "#/texts/41"
      },
      {
        "$ref": "#/texts/42"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/groups/5"
      },
      {
        "$ref": "#/texts/47"
      },
      {
        "$ref": "#/texts/48"
      },
      {
        "$ref": "#/texts/49"
      },
      {
        "$ref": "#/texts/50"
      },
      {
        "$ref": "#/texts/51"
      },
      {
        "$ref": "#/texts/52"
      },
      {
        "$ref": "#/texts/53"
      },
      {
        "$ref": "#/texts/54"
      },
      {
        "$ref": "#/texts/55"
      },
      {
        "$ref": "#/texts/56"
      },
      {
        "$ref": "#/texts/57"
      },
      {
        "$ref": "#/texts/58"
      },
      {
        "$ref": "#/texts/59"
      },
      {
        "$ref": "#/texts/60"
      },
      {
        "$ref": "#/texts/61"
      },
      {
        "$ref": "#/texts/62"
      },
      {
        "$ref": "#/texts/63"
      },
      {
        "$ref": "#/texts/64"
      },
      {
        "$ref": "#/texts/65"
      },
      {
        "$ref": "#/texts/66"
      },
      {
        "$ref": "#/texts/67"
      },
      {
        "$ref": "#/texts/68"
      },
      {
        "$ref": "#/texts/69"
      },
      {
        "$ref": "#/texts/70"
      },
      {
        "$ref": "#/texts/71"
      },
      {
        "$ref": "#/texts/72"
      },
      {
        "$ref": "#/texts/73"
      },
      {
        "$ref": "#/texts/74"
      },
      {
        "$ref": "#/texts/75"
      },
      {
        "$ref": "#/texts/76"
      },
      {
        "$ref": "#/texts/77"
      },
      {
        "$ref": "#/texts/78"
      },
      {
        "$ref": "#/texts/79"
      },
      {
        "$ref": "#/texts/80"
      },
      {
        "$ref": "#/texts/81"
      },
      {
        "$ref": "#/texts/82"
      },
      {
        "$ref": "#/texts/83"
      },
      {
        "$ref": "#/texts/84"
      },
      {
        "$ref": "#/texts/85"
      },
      {
        "$ref": "#/texts/86"
      },
      {
        "$ref": "#/texts/87"
      },
      {
        "$ref": "#/texts/88"
      },
      {
        "$ref": "#/texts/89"
      },
      {
        "$ref": "#/texts/90"
      },
      {
        "$ref": "#/texts/91"
      },
      {
        "$ref": "#/texts/92"
      },
      {
        "$ref": "#/texts/93"
      },
      {
        "$ref": "#/texts/94"
      },
      {
        "$ref": "#/texts/95"
      },
      {
        "$ref": "#/texts/96"
      },
      {
        "$ref": "#/texts/97"
      },
      {
        "$ref": "#/texts/98"
      },
      {
        "$ref": "#/texts/99"
      },
      {
        "$ref": "#/texts/100"
      },
      {
        "$ref": "#/texts/101"
      },
      {
        "$ref": "#/texts/102"
      },
      {
        "$ref": "#/texts/103"
      },
      {
        "$ref": "#/texts/104"
      },
      {
        "$ref": "#/texts/105"
      },
      {
        "$ref": "#/texts/106"
      },
      {
        "$ref": "#/texts/107"
      },
      {
        "$ref": "#/texts/108"
      },
      {
        "$ref": "#/texts/109"
      },
      {
        "$ref": "#/texts/110"
      },
      {
        "$ref": "#/texts/111"
      },
      {
        "$ref": "#/texts/112"
      },
      {
        "$ref": "#/texts/113"
      },
      {
        "$ref": "#/texts/114"
      },
      {
        "$ref": "#/texts/115"
      },
      {
        "$ref": "#/texts/116"
      },
      {
        "$ref": "#/texts/117"
      },
      {
        "$ref": "#/texts/118"
      },
      {
        "$ref": "#/texts/119"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/1"
        },
        {
          "$ref": "#/texts/2"
        },
        {
          "$ref": "#/texts/3"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/8"
        },
        {
          "$ref": "#/texts/9"
        },
        {
          "$ref": "#/texts/10"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/16"
        },
        {
          "$ref": "#/texts/17"
        },
        {
          "$ref": "#/texts/18"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/30"
        },
        {
          "$ref": "#/texts/31"
        },
        {
          "$ref": "#/texts/32"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/34"
        },
        {
          "$ref": "#/texts/35"
        },
        {
          "$ref": "#/texts/36"
        },
        {
          "$ref": "#/texts/37"
        },
        {
          "$ref": "#/texts/38"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "ordered_list"
    },
    {
      "self_ref": "#/groups/5",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/44"
        },
        {
          "$ref": "#/texts/45"
        },
        {
          "$ref": "#/texts/46"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "author: Major Hayden date: '2023-01-02' summary: > Although my first attempt at self-hosting Mastodon was a failure, I went back for a second attempt with docker-compose. \ud83e\uddd7\u200d\u2642\ufe0f tags:",
      "text": "author: Major Hayden date: '2023-01-02' summary: > Although my first attempt at self-hosting Mastodon was a failure, I went back for a second attempt with docker-compose. \ud83e\uddd7\u200d\u2642\ufe0f tags:"
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "containers",
      "text": "containers",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "mastodon",
      "text": "mastodon",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "selfhosted",
      "text": "selfhosted",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Mastodon  caught my attention at the end of 2022 in the wake of all the Twitter shenanigans. At a high level, Mastodon is an implementation of  ActivityPub  and you can use it for \"micro-blogging\" much like you would use Twitter. (This is a really quick, high-level explanation and I skipped over plenty of detail.)  \ud83d\ude09",
      "text": "Mastodon  caught my attention at the end of 2022 in the wake of all the Twitter shenanigans. At a high level, Mastodon is an implementation of  ActivityPub  and you can use it for \"micro-blogging\" much like you would use Twitter. (This is a really quick, high-level explanation and I skipped over plenty of detail.)  \ud83d\ude09"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This post covers my journey on Mastodon that led me to self-host my own Mastodon instance in a fairly reliable way.",
      "text": "This post covers my journey on Mastodon that led me to self-host my own Mastodon instance in a fairly reliable way."
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Early start",
      "text": "Early start"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "My early Mastodon adventure started out much like the story of  Goldilocks :",
      "text": "My early Mastodon adventure started out much like the story of  Goldilocks :"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "I started out on ",
      "text": "I started out on ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "I deployed my own, but it was ",
      "text": "I deployed my own, but it was ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Finally, I discovered ",
      "text": "Finally, I discovered ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The admins of the Fosstodon instance are fantastic. Sure, there was downtime as the usage levels increased, but the admin team was quick to communicate the issues at hand along with future plans. My interactions with the community were almost all positive and it was fun to reconnect with some open source contributors that I had not spoken to in ages.",
      "text": "The admins of the Fosstodon instance are fantastic. Sure, there was downtime as the usage levels increased, but the admin team was quick to communicate the issues at hand along with future plans. My interactions with the community were almost all positive and it was fun to reconnect with some open source contributors that I had not spoken to in ages."
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "As time went on, I read various toots[^still_toots] about Mastodon servers changing owners, suddenly going offline, or altering rules abruptly. Someone talked about taking control of your online identity and that Mastodon should be included in that.",
      "text": "As time went on, I read various toots[^still_toots] about Mastodon servers changing owners, suddenly going offline, or altering rules abruptly. Someone talked about taking control of your online identity and that Mastodon should be included in that."
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This aligned with my existing approach to hosting blogs on my own domains. Also, after the Twitter fiasco, I'd like people to find me via the systems where I have full control, such as my blog.",
      "text": "This aligned with my existing approach to hosting blogs on my own domains. Also, after the Twitter fiasco, I'd like people to find me via the systems where I have full control, such as my blog."
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Self-hosted adventure",
      "text": "Self-hosted adventure"
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "So far, there are three main deployment methods for Mastodon that I've found:",
      "text": "So far, there are three main deployment methods for Mastodon that I've found:"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "The ",
      "text": "The ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Using ",
      "text": "Using ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Deploying in kubernetes using ",
      "text": "Deploying in kubernetes using ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Official guide",
      "text": "Official guide",
      "level": 1
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Although the official guide looks fairly straightforward, it has a lot of steps. I struggled to get the right Ruby version compiled on Fedora 37 and I found spots where I needed to tweak the guide to make things work. Also, I wasn't sure if I could get the steps done the same way again if I needed to migrate the instance or recover from a failure.",
      "text": "Although the official guide looks fairly straightforward, it has a lot of steps. I struggled to get the right Ruby version compiled on Fedora 37 and I found spots where I needed to tweak the guide to make things work. Also, I wasn't sure if I could get the steps done the same way again if I needed to migrate the instance or recover from a failure."
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "docker-compose",
      "text": "docker-compose",
      "level": 1
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Next up was docker-compose. I use docker-compose  quite often  and I know my way around many of the rough edges. However, I couldn't get the upstream compose file to work properly. Sometimes the database migrations would not run. Sometimes certain pieces of the Mastodon infrastructure couldn't find each other. As soon as I tried to set passwords for postgres and redis, I couldn't get Mastodon's rails app to work again.",
      "text": "Next up was docker-compose. I use docker-compose  quite often  and I know my way around many of the rough edges. However, I couldn't get the upstream compose file to work properly. Sometimes the database migrations would not run. Sometimes certain pieces of the Mastodon infrastructure couldn't find each other. As soon as I tried to set passwords for postgres and redis, I couldn't get Mastodon's rails app to work again."
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "In addition, the docker-compose file from upstream builds containers on your local machine rather than pulling the official containers that were built and tested upstream. That's a quick fix in the compose file, but I still had issues during the deployment.",
      "text": "In addition, the docker-compose file from upstream builds containers on your local machine rather than pulling the official containers that were built and tested upstream. That's a quick fix in the compose file, but I still had issues during the deployment."
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "kubernetes",
      "text": "kubernetes",
      "level": 1
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Finally, I looked at kubernetes. Surely you can just add kubernetes to something and make it better, right? \ud83d\ude06",
      "text": "Finally, I looked at kubernetes. Surely you can just add kubernetes to something and make it better, right? \ud83d\ude06"
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The Bitnami charts made it much further along than the charts from upstream, but I still had errors flowing about database migrations cut off during their run and occasionally unreachable postgres servers.",
      "text": "The Bitnami charts made it much further along than the charts from upstream, but I still had errors flowing about database migrations cut off during their run and occasionally unreachable postgres servers."
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "There must be a better way.",
      "text": "There must be a better way."
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Deployment",
      "text": "Deployment"
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "For this Mastodon deployment to work well, I needed a few things:",
      "text": "For this Mastodon deployment to work well, I needed a few things:"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "The deployment should be ",
      "text": "The deployment should be ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "It should be relatively easy to back up and restore.",
      "text": "It should be relatively easy to back up and restore.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "The big file of secret environment variables should be generated ahead of time and not at deploy time.",
      "text": "The big file of secret environment variables should be generated ahead of time and not at deploy time.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "After plenty of trial and error, I came up with this plan:",
      "text": "After plenty of trial and error, I came up with this plan:"
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Start with an empty secrets environment file. Deploy all of the containers and run the ",
      "text": "Start with an empty secrets environment file. Deploy all of the containers and run the ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Copy the environment file to ",
      "text": "Copy the environment file to ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Delete the entire deployment. Remove all existing volumes and containers.",
      "text": "Delete the entire deployment. Remove all existing volumes and containers.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Add ",
      "text": "Add ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Deploy again with ",
      "text": "Deploy again with ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Without further ado, let's get to the guide!",
      "text": "Without further ado, let's get to the guide!"
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Generate the environment file",
      "text": "Generate the environment file",
      "level": 1
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Here's my initial docker-compose file:",
      "text": "Here's my initial docker-compose file:"
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "version: '3'\nservices:\n  postgres:\n    restart: always\n    container_name: postgres\n    image: docker.io/library/postgres:14\n    networks:\n      - internal_network\n    healthcheck:\n      test: ['CMD', 'pg_isready', '-U', 'postgres']\n    volumes:\n      - postgres:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_HOST_AUTH_METHOD=trust\n      - POSTGRES_PASSWORD=my-super-secret-postgres-password\n      - POSTGRES_USER=postgres\n\n  redis:\n    restart: always\n    container_name: redis\n    image: redis:7\n    networks:\n      - internal_network\n    healthcheck:\n      test: ['CMD', 'redis-cli', 'ping']\n    volumes:\n      - redis:/data\n\n  web:\n    image: tootsuite/mastodon\n    container_name: web\n    restart: always\n    env_file: .env.production\n    command: bash -c \"rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000\"\n    networks:\n      - external_network\n      - internal_network\n    healthcheck:\n      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']\n    ports:\n      - '127.0.0.1:3000:3000'\n    depends_on:\n      - postgres\n      - redis\n      # - es\n    volumes:\n      - mastodon-public:/mastodon/public/system\n\n  streaming:\n    image: tootsuite/mastodon\n    container_name: streaming\n    restart: always\n    env_file: .env.production\n    command: node ./streaming\n    networks:\n      - external_network\n      - internal_network\n    healthcheck:\n      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']\n    ports:\n      - '127.0.0.1:4000:4000'\n    depends_on:\n      - postgres\n      - redis\n\n  sidekiq:\n    image: tootsuite/mastodon\n    container_name: sidekiq\n    restart: always\n    env_file: .env.production\n    command: bundle exec sidekiq -c 1\n    depends_on:\n      - postgres\n      - redis\n    networks:\n      - external_network\n      - internal_network\n    volumes:\n      - mastodon-public:/mastodon/public/system\n    healthcheck:\n      test: ['CMD-SHELL', \"ps aux | grep '[s]idekiq\\ 6' || false\"]\n\nnetworks:\n  external_network:\n  internal_network:\n    internal: true\n\nvolumes:\n  mastodon-public: {}\n  postgres: {}\n  redis: {}",
      "text": "version: '3'\nservices:\n  postgres:\n    restart: always\n    container_name: postgres\n    image: docker.io/library/postgres:14\n    networks:\n      - internal_network\n    healthcheck:\n      test: ['CMD', 'pg_isready', '-U', 'postgres']\n    volumes:\n      - postgres:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_HOST_AUTH_METHOD=trust\n      - POSTGRES_PASSWORD=my-super-secret-postgres-password\n      - POSTGRES_USER=postgres\n\n  redis:\n    restart: always\n    container_name: redis\n    image: redis:7\n    networks:\n      - internal_network\n    healthcheck:\n      test: ['CMD', 'redis-cli', 'ping']\n    volumes:\n      - redis:/data\n\n  web:\n    image: tootsuite/mastodon\n    container_name: web\n    restart: always\n    env_file: .env.production\n    command: bash -c \"rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000\"\n    networks:\n      - external_network\n      - internal_network\n    healthcheck:\n      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']\n    ports:\n      - '127.0.0.1:3000:3000'\n    depends_on:\n      - postgres\n      - redis\n      # - es\n    volumes:\n      - mastodon-public:/mastodon/public/system\n\n  streaming:\n    image: tootsuite/mastodon\n    container_name: streaming\n    restart: always\n    env_file: .env.production\n    command: node ./streaming\n    networks:\n      - external_network\n      - internal_network\n    healthcheck:\n      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']\n    ports:\n      - '127.0.0.1:4000:4000'\n    depends_on:\n      - postgres\n      - redis\n\n  sidekiq:\n    image: tootsuite/mastodon\n    container_name: sidekiq\n    restart: always\n    env_file: .env.production\n    command: bundle exec sidekiq -c 1\n    depends_on:\n      - postgres\n      - redis\n    networks:\n      - external_network\n      - internal_network\n    volumes:\n      - mastodon-public:/mastodon/public/system\n    healthcheck:\n      test: ['CMD-SHELL', \"ps aux | grep '[s]idekiq\\ 6' || false\"]\n\nnetworks:\n  external_network:\n  internal_network:\n    internal: true\n\nvolumes:\n  mastodon-public: {}\n  postgres: {}\n  redis: {}",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I've made a few alterations to the upstream compose file:",
      "text": "I've made a few alterations to the upstream compose file:"
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/groups/5"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "I'm using the upstream containers from docker hub rather than building them on startup",
      "text": "I'm using the upstream containers from docker hub rather than building them on startup",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/groups/5"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "My containers use docker volumes instead of mounting local directories",
      "text": "My containers use docker volumes instead of mounting local directories",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/groups/5"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "The sidekiq container only uses one worker (keeping resource usage low)",
      "text": "The sidekiq container only uses one worker (keeping resource usage low)",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "At this point, I can run ",
      "text": "At this point, I can run "
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker-compose up -d",
      "text": "docker-compose up -d",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " and all of the containers are running. Now we can use Mastodon's interactive configuration tool to generate our environments file:",
      "text": " and all of the containers are running. Now we can use Mastodon's interactive configuration tool to generate our environments file:"
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker-compose run --rm web bundle exec rake db:setup",
      "text": "docker-compose run --rm web bundle exec rake db:setup",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Go through the interactive configuration and answer all of the questions there.",
      "text": "Go through the interactive configuration and answer all of the questions there."
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "For SMTP, I used  Mailgun  since it's very inexpensive for my Mastodon use case. Once you set up your account there, look for the SMTP credentials under your domain in Mailgun's control panel. The Mastodon setup process will ask for those credentials.",
      "text": "For SMTP, I used  Mailgun  since it's very inexpensive for my Mastodon use case. Once you set up your account there, look for the SMTP credentials under your domain in Mailgun's control panel. The Mastodon setup process will ask for those credentials."
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Also, I keep all of my assets in  Backblaze B2  to avoid clogging up all of the storage on my VM that runs Mastodon. Create a public bucket in Backblaze and create some access keys. When Mastodon asks for your S3 endpoint, use ",
      "text": "Also, I keep all of my assets in  Backblaze B2  to avoid clogging up all of the storage on my VM that runs Mastodon. Create a public bucket in Backblaze and create some access keys. When Mastodon asks for your S3 endpoint, use "
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "https://s3.us-west-001.backblazeb2.com",
      "text": "https://s3.us-west-001.backblazeb2.com",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ". If it asks for a hostname, you can use ",
      "text": ". If it asks for a hostname, you can use "
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "s3.us-west-001.backblazeb2.com",
      "text": "s3.us-west-001.backblazeb2.com",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ".",
      "text": "."
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Once the setup completes, take the environments file that prints to the screen and store that as ",
      "text": "Once the setup completes, take the environments file that prints to the screen and store that as "
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": ".env.production",
      "text": ".env.production",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ".",
      "text": "."
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Delete the deployment (for real)",
      "text": "Delete the deployment (for real)",
      "level": 1
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This is going to sound weird, but we need to throw everything away at this point. I like this step because it allows me to start fresh with a fully generated environments file. It's a good simulation of how things might look in a brand new deployment or during a migration from one server to another.",
      "text": "This is going to sound weird, but we need to throw everything away at this point. I like this step because it allows me to start fresh with a fully generated environments file. It's a good simulation of how things might look in a brand new deployment or during a migration from one server to another."
    },
    {
      "self_ref": "#/texts/63",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "{{< alert >}} \ud83d\udca3  WARNING! This assumes that Mastodon's containers are the only ones running on your system. If you are running other containers for other services,  don't run these commands . You must go through each container, remove it, and remove the associated volume carefully. {{< /alert >}}",
      "text": "{{< alert >}} \ud83d\udca3  WARNING! This assumes that Mastodon's containers are the only ones running on your system. If you are running other containers for other services,  don't run these commands . You must go through each container, remove it, and remove the associated volume carefully. {{< /alert >}}"
    },
    {
      "self_ref": "#/texts/64",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# Stop all of the current containers and delete them (see warning above!)\n$ docker-compose rm -sfv\n\n# Destroy all of the container volumes (see warning above!)\n$ docker system prune --volumes",
      "text": "# Stop all of the current containers and delete them (see warning above!)\n$ docker-compose rm -sfv\n\n# Destroy all of the container volumes (see warning above!)\n$ docker system prune --volumes",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/65",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Add Caddy",
      "text": "Add Caddy"
    },
    {
      "self_ref": "#/texts/66",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "For most container deployments, I'd use  traefik  here. Its configuration discovery abilities, especially when paired with docker-compose, are top-notch. There's almost no little one-off configuration issues when you use traefik.",
      "text": "For most container deployments, I'd use  traefik  here. Its configuration discovery abilities, especially when paired with docker-compose, are top-notch. There's almost no little one-off configuration issues when you use traefik."
    },
    {
      "self_ref": "#/texts/67",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "However, Mastodon has tons of static assets, such as images, stylesheets, and other media. Serving those through Mastodon's rails web server is possible, but it's horribly inefficient. It chews up much more CPU time and it's slower to respond.",
      "text": "However, Mastodon has tons of static assets, such as images, stylesheets, and other media. Serving those through Mastodon's rails web server is possible, but it's horribly inefficient. It chews up much more CPU time and it's slower to respond."
    },
    {
      "self_ref": "#/texts/68",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "That's where Caddy comes in. Caddy has automatic TLS capabilities with LetsEncrypt and it can also serve static content. This takes the load off of Mastodon's rails web server.",
      "text": "That's where Caddy comes in. Caddy has automatic TLS capabilities with LetsEncrypt and it can also serve static content. This takes the load off of Mastodon's rails web server."
    },
    {
      "self_ref": "#/texts/69",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Start by adding a new service to your compose file:",
      "text": "Start by adding a new service to your compose file:"
    },
    {
      "self_ref": "#/texts/70",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "caddy:\n    image: caddy:2-alpine\n    restart: unless-stopped\n    container_name: caddy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./caddy/etc-caddy:/etc/caddy:Z\n      - ./caddy/logs:/logs:Z\n      - mastodon-public:/srv/mastodon/public:ro\n    hostname: \"tootchute.com\"\n    networks:\n      - internal_network\n      - external_network",
      "text": "caddy:\n    image: caddy:2-alpine\n    restart: unless-stopped\n    container_name: caddy\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./caddy/etc-caddy:/etc/caddy:Z\n      - ./caddy/logs:/logs:Z\n      - mastodon-public:/srv/mastodon/public:ro\n    hostname: \"tootchute.com\"\n    networks:\n      - internal_network\n      - external_network",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/71",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Change the ",
      "text": "Change the "
    },
    {
      "self_ref": "#/texts/72",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "hostname",
      "text": "hostname",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/73",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " to fit your server. The ",
      "text": " to fit your server. The "
    },
    {
      "self_ref": "#/texts/74",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "mastodon-public",
      "text": "mastodon-public",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/75",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " volume is the one that Mastodon uses for its public content and mounting it inside the Caddy container allows Caddy to serve those assets.",
      "text": " volume is the one that Mastodon uses for its public content and mounting it inside the Caddy container allows Caddy to serve those assets."
    },
    {
      "self_ref": "#/texts/76",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "In my case, I created a ",
      "text": "In my case, I created a "
    },
    {
      "self_ref": "#/texts/77",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "caddy",
      "text": "caddy",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/78",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " directory in my home directory to hold the configuration and log files:",
      "text": " directory in my home directory to hold the configuration and log files:"
    },
    {
      "self_ref": "#/texts/79",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ mkdir caddy/{etc-caddy,logs}",
      "text": "$ mkdir caddy/{etc-caddy,logs}",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/80",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "\ud83e\udd13  NERD ALERT. The ",
      "text": "\ud83e\udd13  NERD ALERT. The "
    },
    {
      "self_ref": "#/texts/81",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": ":Z",
      "text": ":Z",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/82",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " on the volumes for configuration and logs ensures that these directories have the right SELinux contexts so that the container can access the files in these directories. If your system does not use SELinux, you can omit the ",
      "text": " on the volumes for configuration and logs ensures that these directories have the right SELinux contexts so that the container can access the files in these directories. If your system does not use SELinux, you can omit the "
    },
    {
      "self_ref": "#/texts/83",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": ":Z",
      "text": ":Z",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/84",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ".",
      "text": "."
    },
    {
      "self_ref": "#/texts/85",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I wrote a caddy configuration in ",
      "text": "I wrote a caddy configuration in "
    },
    {
      "self_ref": "#/texts/86",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "./caddy/etc-caddy/Caddyfile",
      "text": "./caddy/etc-caddy/Caddyfile",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/87",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " that is a slight tweak of  Robert Riemann's version :",
      "text": " that is a slight tweak of  Robert Riemann's version :"
    },
    {
      "self_ref": "#/texts/88",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "{\n        # Global options block. Entirely optional, https is on by default\n        # Optional email key for lets encrypt\n        email major@mhtx.net\n        # Optional staging lets encrypt for testing. Comment out for production.\n        # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory\n\n        # admin off\n}\n\ntootchute.com {\n        log {\n                # format single_field common_log\n                output file /logs/access.log\n        }\n\n        root * /srv/mastodon/public\n\n        encode gzip\n\n        @static file\n\n        handle @static {\n                file_server\n        }\n\n        handle /api/v1/streaming* {\n                reverse_proxy streaming:4000\n        }\n\n        handle {\n                reverse_proxy web:3000\n        }\n\n        #header {\n        #        Strict-Transport-Security \"max-age=31536000;\"\n        #}\n\n        header /sw.js  Cache-Control \"public, max-age=0\";\n        header /emoji* Cache-Control \"public, max-age=31536000, immutable\"\n        header /packs* Cache-Control \"public, max-age=31536000, immutable\"\n        header /system/accounts/avatars* Cache-Control \"public, max-age=31536000, immutable\"\n        header /system/media_attachments/files* Cache-Control \"public, max-age=31536000, immutable\"\n\n        handle_errors {\n                @5xx expression `{http.error.status_code} >= 500 && {http.error.status_code} < 600`\n                rewrite @5xx /500.html\n                file_server\n        }\n}",
      "text": "{\n        # Global options block. Entirely optional, https is on by default\n        # Optional email key for lets encrypt\n        email major@mhtx.net\n        # Optional staging lets encrypt for testing. Comment out for production.\n        # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory\n\n        # admin off\n}\n\ntootchute.com {\n        log {\n                # format single_field common_log\n                output file /logs/access.log\n        }\n\n        root * /srv/mastodon/public\n\n        encode gzip\n\n        @static file\n\n        handle @static {\n                file_server\n        }\n\n        handle /api/v1/streaming* {\n                reverse_proxy streaming:4000\n        }\n\n        handle {\n                reverse_proxy web:3000\n        }\n\n        #header {\n        #        Strict-Transport-Security \"max-age=31536000;\"\n        #}\n\n        header /sw.js  Cache-Control \"public, max-age=0\";\n        header /emoji* Cache-Control \"public, max-age=31536000, immutable\"\n        header /packs* Cache-Control \"public, max-age=31536000, immutable\"\n        header /system/accounts/avatars* Cache-Control \"public, max-age=31536000, immutable\"\n        header /system/media_attachments/files* Cache-Control \"public, max-age=31536000, immutable\"\n\n        handle_errors {\n                @5xx expression `{http.error.status_code} >= 500 && {http.error.status_code} < 600`\n                rewrite @5xx /500.html\n                file_server\n        }\n}",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/89",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Be sure to change ",
      "text": "Be sure to change "
    },
    {
      "self_ref": "#/texts/90",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "tootchute.com",
      "text": "tootchute.com",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/91",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " to your Mastodon server's domain as well as ",
      "text": " to your Mastodon server's domain as well as "
    },
    {
      "self_ref": "#/texts/92",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "email",
      "text": "email",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/93",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " to your email. In addition, you may want to uncomment the ",
      "text": " to your email. In addition, you may want to uncomment the "
    },
    {
      "self_ref": "#/texts/94",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "acme_ca",
      "text": "acme_ca",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/95",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " option shown there to avoid hitting LetsEncrypt's production API limits while you are testing your deployment. (Comment out the staging server later to ensure you get a valid, trusted certificate.)",
      "text": " option shown there to avoid hitting LetsEncrypt's production API limits while you are testing your deployment. (Comment out the staging server later to ensure you get a valid, trusted certificate.)"
    },
    {
      "self_ref": "#/texts/96",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's bring up our new Caddy container!",
      "text": "Let's bring up our new Caddy container!"
    },
    {
      "self_ref": "#/texts/97",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ docker-compose up -d",
      "text": "$ docker-compose up -d",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/98",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Initialize Mastodon",
      "text": "Initialize Mastodon",
      "level": 1
    },
    {
      "self_ref": "#/texts/99",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "At this point, we have Caddy serving content and all of our Mastodon containers are running. However, the Mastodon database isn't populated at all. Let's do that now:",
      "text": "At this point, we have Caddy serving content and all of our Mastodon containers are running. However, the Mastodon database isn't populated at all. Let's do that now:"
    },
    {
      "self_ref": "#/texts/100",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker-compose run --rm web bundle exec rake db:setup",
      "text": "docker-compose run --rm web bundle exec rake db:setup",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/101",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This step uses your environments file to run all of Mastodon's database migrations and perform some initial setup steps. It might take about 30 seconds to run.",
      "text": "This step uses your environments file to run all of Mastodon's database migrations and perform some initial setup steps. It might take about 30 seconds to run."
    },
    {
      "self_ref": "#/texts/102",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Create our first user once the setup process finishes:",
      "text": "Create our first user once the setup process finishes:"
    },
    {
      "self_ref": "#/texts/103",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ docker-compose run --rm web bin/tootctl accounts create USERNAME --email YOUR_EMAIL --confirmed --role Owner",
      "text": "$ docker-compose run --rm web bin/tootctl accounts create USERNAME --email YOUR_EMAIL --confirmed --role Owner",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/104",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This command creates a new administrative user, sets the email address for that user, and confirms the account. The confirmation part allows you to skip the email confirmation process for that first account. Your initial password prints out as soon as the command finishes.",
      "text": "This command creates a new administrative user, sets the email address for that user, and confirms the account. The confirmation part allows you to skip the email confirmation process for that first account. Your initial password prints out as soon as the command finishes."
    },
    {
      "self_ref": "#/texts/105",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You should be able to access your Mastodon deployment on the domain you chose (mine is  tootchute.com  and log in as the user you just created. If something doesn't look right, examine the container logs to see if it's something obvious:",
      "text": "You should be able to access your Mastodon deployment on the domain you chose (mine is  tootchute.com  and log in as the user you just created. If something doesn't look right, examine the container logs to see if it's something obvious:"
    },
    {
      "self_ref": "#/texts/106",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ docker-compose logs -f --since 5m",
      "text": "$ docker-compose logs -f --since 5m",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/107",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If a container is in a restart loop, you should catch it fairly quickly in the logs.",
      "text": "If a container is in a restart loop, you should catch it fairly quickly in the logs."
    },
    {
      "self_ref": "#/texts/108",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Next steps",
      "text": "Next steps"
    },
    {
      "self_ref": "#/texts/109",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "First, turn off new registrations if you plan to run a single user instance like I do. Click the preferences gear/cog on the main page, click  Administration , * Server Settings , and  Registrations .",
      "text": "First, turn off new registrations if you plan to run a single user instance like I do. Click the preferences gear/cog on the main page, click  Administration , * Server Settings , and  Registrations ."
    },
    {
      "self_ref": "#/texts/110",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Next, enable two-factor authentication for your account. Click the preferences gear/cog on the main page, click  Account , and then  Two-factor Auth .",
      "text": "Next, enable two-factor authentication for your account. Click the preferences gear/cog on the main page, click  Account , and then  Two-factor Auth ."
    },
    {
      "self_ref": "#/texts/111",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Finally, back up your environments file (",
      "text": "Finally, back up your environments file ("
    },
    {
      "self_ref": "#/texts/112",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": ".env.production",
      "text": ".env.production",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/113",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ") and your ",
      "text": ") and your "
    },
    {
      "self_ref": "#/texts/114",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "docker-compose.yaml",
      "text": "docker-compose.yaml",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/115",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ". This will make it much easier to recover from a failure or migrate to a new server.",
      "text": ". This will make it much easier to recover from a failure or migrate to a new server."
    },
    {
      "self_ref": "#/texts/116",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If you're using remote assets in S3 or Backblaze, you don't need to back up that content. Focus on backing up postgres and redis on a regular basis:",
      "text": "If you're using remote assets in S3 or Backblaze, you don't need to back up that content. Focus on backing up postgres and redis on a regular basis:"
    },
    {
      "self_ref": "#/texts/117",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# Dump postgres data\n$ docker-compose exec postgres pg_dump -d mastodon -U postgres --no-owner > backups/pgdump-$(date +%F_%H-%M-%S).sql\n\n# Copy redis data\n$ docker-compose cp redis:/data/dump.rdb backups/",
      "text": "# Dump postgres data\n$ docker-compose exec postgres pg_dump -d mastodon -U postgres --no-owner > backups/pgdump-$(date +%F_%H-%M-%S).sql\n\n# Copy redis data\n$ docker-compose cp redis:/data/dump.rdb backups/",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/118",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let me know  if you run into problems with the steps described in this post. I assembled them from my shell history and some notes I took along the way. There's always a chance I missed something.",
      "text": "Let me know  if you run into problems with the steps described in this post. I assembled them from my shell history and some notes I took along the way. There's always a chance I missed something."
    },
    {
      "self_ref": "#/texts/119",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "[^still_toots]: Posts on Mastodon were called \"toots\" for ages since that's the supposed sound that an elephant trunk makes. Many people want to switch that to \"posts\" and the latest version of Mastodon changed the \"toot\" button to \"publish.\" I'll call them toots forever. Heck, I'm the owner of  tootchute.com . \ud83d\ude09",
      "text": "[^still_toots]: Posts on Mastodon were called \"toots\" for ages since that's the supposed sound that an elephant trunk makes. Many people want to switch that to \"posts\" and the latest version of Mastodon changed the \"toot\" button to \"publish.\" I'll call them toots forever. Heck, I'm the owner of  tootchute.com . \ud83d\ude09"
    }
  ],
  "pictures": [],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}