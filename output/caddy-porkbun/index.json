{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "myfile",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 10002874825950718415,
    "filename": "myfile.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/texts/1"
      },
      {
        "$ref": "#/texts/2"
      },
      {
        "$ref": "#/texts/3"
      },
      {
        "$ref": "#/texts/4"
      },
      {
        "$ref": "#/texts/5"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/10"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/pictures/0"
      },
      {
        "$ref": "#/texts/13"
      },
      {
        "$ref": "#/texts/14"
      },
      {
        "$ref": "#/texts/15"
      },
      {
        "$ref": "#/texts/16"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/pictures/1"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/texts/38"
      },
      {
        "$ref": "#/texts/39"
      },
      {
        "$ref": "#/texts/40"
      },
      {
        "$ref": "#/texts/41"
      },
      {
        "$ref": "#/texts/42"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/texts/44"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/6"
        },
        {
          "$ref": "#/texts/7"
        },
        {
          "$ref": "#/texts/8"
        },
        {
          "$ref": "#/texts/9"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "ordered_list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/29"
        },
        {
          "$ref": "#/texts/30"
        },
        {
          "$ref": "#/texts/31"
        },
        {
          "$ref": "#/texts/32"
        },
        {
          "$ref": "#/texts/33"
        },
        {
          "$ref": "#/texts/34"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "ordered_list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I recently told a coworker about  Caddy , a small web and proxy server with a very simple configuration. It also has a handy feature where it manages your TLS certificate for you automatically.",
      "text": "I recently told a coworker about  Caddy , a small web and proxy server with a very simple configuration. It also has a handy feature where it manages your TLS certificate for you automatically."
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "However, one problem I had at home with my  CoreOS  deployment is that I don't have inbound network access to handle the certificate verification process. Most automated certificate vendors need to reach your web server to verify that you have control over your domain.",
      "text": "However, one problem I had at home with my  CoreOS  deployment is that I don't have inbound network access to handle the certificate verification process. Most automated certificate vendors need to reach your web server to verify that you have control over your domain."
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This post talks about how to work around this problem with domains registered at  Porkbun .",
      "text": "This post talks about how to work around this problem with domains registered at  Porkbun ."
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "DNS validation",
      "text": "DNS validation",
      "level": 1
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Certificate providers usually default to verifying domains by making a request to your server and retrieving a validation code. If your systems are all behind a firewall without inbound access from the internet, you can use DNS validation instead.",
      "text": "Certificate providers usually default to verifying domains by making a request to your server and retrieving a validation code. If your systems are all behind a firewall without inbound access from the internet, you can use DNS validation instead."
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The process looks something like this:",
      "text": "The process looks something like this:"
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You tell the certificate provider the domain names you want on your certificate",
      "text": "You tell the certificate provider the domain names you want on your certificate",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "The certificate provider gives you some DNS records to add wherever you host your DNS records",
      "text": "The certificate provider gives you some DNS records to add wherever you host your DNS records",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You add the DNS records",
      "text": "You add the DNS records",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You get your certificates once the certificate provider verifies the records.",
      "text": "You get your certificates once the certificate provider verifies the records.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You can do this manually with something like  acme.sh  today, but it's  painful :",
      "text": "You can do this manually with something like  acme.sh  today, but it's  painful :"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# Make the initial certificate request\nacme.sh --issue --dns -d example.com \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n\n# Add your DNS records manually.\n\n# Verify the DNS records and issue the certificates.\nacme.sh --issue --dns -d example.com \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please --renew\n\n# Copy the keys/certificates and configure your webserver.",
      "text": "# Make the initial certificate request\nacme.sh --issue --dns -d example.com \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please\n\n# Add your DNS records manually.\n\n# Verify the DNS records and issue the certificates.\nacme.sh --issue --dns -d example.com \\\n    --yes-I-know-dns-manual-mode-enough-go-ahead-please --renew\n\n# Copy the keys/certificates and configure your webserver.",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We don't want to live this way.",
      "text": "We don't want to live this way."
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "do-not-want.gif",
      "text": "do-not-want.gif"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's talk about how Caddy can help.",
      "text": "Let's talk about how Caddy can help."
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Adding Porkbun support to Caddy",
      "text": "Adding Porkbun support to Caddy",
      "level": 1
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Caddy is a minimal webserver and  Porkbun support  doesn't get included by default. However, we can quickly add it via a simple container build:",
      "text": "Caddy is a minimal webserver and  Porkbun support  doesn't get included by default. However, we can quickly add it via a simple container build:"
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "FROM caddy:2.7.6-builder AS builder\n\nRUN xcaddy build \\\n    --with github.com/caddy-dns/porkbun\n\nFROM caddy:2.7.6\n\nCOPY --from=builder /usr/bin/caddy /usr/bin/caddy",
      "text": "FROM caddy:2.7.6-builder AS builder\n\nRUN xcaddy build \\\n    --with github.com/caddy-dns/porkbun\n\nFROM caddy:2.7.6\n\nCOPY --from=builder /usr/bin/caddy /usr/bin/caddy",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This is a two stage container build where we compile the Porkbun support and then use that new ",
      "text": "This is a two stage container build where we compile the Porkbun support and then use that new "
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "caddy",
      "text": "caddy",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " binary in the final container.",
      "text": " binary in the final container."
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We're not done yet!",
      "text": "We're not done yet!"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Automated Caddy builds with updates",
      "text": "Automated Caddy builds with updates",
      "level": 1
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I created a  GitHub repository  that builds the Caddy container for me and keeps it updated. There's a  workflow to publish a container  to GitHub's container repository and I can pull containers from there on my various CoreOS machines.",
      "text": "I created a  GitHub repository  that builds the Caddy container for me and keeps it updated. There's a  workflow to publish a container  to GitHub's container repository and I can pull containers from there on my various CoreOS machines."
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "In addition, I use  Renovate  to watch for Caddy updates. New updates come through a  regular pull request  and I can apply them whenever I want.",
      "text": "In addition, I use  Renovate  to watch for Caddy updates. New updates come through a  regular pull request  and I can apply them whenever I want."
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "caption",
      "prov": [],
      "orig": "Example pull request from Renovate",
      "text": "Example pull request from Renovate"
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Renovate pull request",
      "text": "Renovate pull request"
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Connecting to Porkbun",
      "text": "Connecting to Porkbun",
      "level": 1
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We start here by getting an API key to manage the domain at Porkbun.",
      "text": "We start here by getting an API key to manage the domain at Porkbun."
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Log into your ",
      "text": "Log into your ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Click ",
      "text": "Click ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Look for ",
      "text": "Look for ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "At the top right of the dashboard, click ",
      "text": "At the top right of the dashboard, click ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Add a title for your new API key, such as ",
      "text": "Add a title for your new API key, such as ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Save the API key and secrey key that are displayed.",
      "text": "Save the API key and secrey key that are displayed.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Open up your Caddy configuration file (the  Caddyfile ) and add some configuration:",
      "text": "Open up your Caddy configuration file (the  Caddyfile ) and add some configuration:"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "{\n        email me@example.com\n\n        # Uncomment this next line if you want to get\n        # some test certificates first.\n        # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory\n\n        acme_dns porkbun {\n                api_key pk1_******\n                api_secret_key sk1_******\n        }\n}\n\nexample.com {\n        handle {\n                respond \"Hello world!\"\n        }\n}",
      "text": "{\n        email me@example.com\n\n        # Uncomment this next line if you want to get\n        # some test certificates first.\n        # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory\n\n        acme_dns porkbun {\n                api_key pk1_******\n                api_secret_key sk1_******\n        }\n}\n\nexample.com {\n        handle {\n                respond \"Hello world!\"\n        }\n}",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Save the Caddyfile and restart your Caddy server or container. Caddy will immediately begin requesting your TLS certificates and managing your DNS records for those certificates. This normally finishes in less than 30 seconds or so during the first run.",
      "text": "Save the Caddyfile and restart your Caddy server or container. Caddy will immediately begin requesting your TLS certificates and managing your DNS records for those certificates. This normally finishes in less than 30 seconds or so during the first run."
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If you don't see the HTTPS endpoint working within a minute or two, be sure to check the Caddy logs. You might have a typo in a Porkbun API key or the domain you're trying to modify doesn't have the  API Access  switch enabled.",
      "text": "If you don't see the HTTPS endpoint working within a minute or two, be sure to check the Caddy logs. You might have a typo in a Porkbun API key or the domain you're trying to modify doesn't have the  API Access  switch enabled."
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "{{< alert \"circle-info\" >}} Remember that Porkbun requires you to enable API access for each domain. API access is disabled at Porkbun by default. {{</ alert >}}",
      "text": "{{< alert \"circle-info\" >}} Remember that Porkbun requires you to enable API access for each domain. API access is disabled at Porkbun by default. {{</ alert >}}"
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "That's it!  \ud83c\udf89",
      "text": "That's it!  \ud83c\udf89"
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Renewals",
      "text": "Renewals",
      "level": 1
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Caddy will keep watch over the certificates and begin the renewal process as the expiration approaches. It has a very careful retry mechanism that ensures your certificates are updated without tripping any rate limits at the certificate provider.",
      "text": "Caddy will keep watch over the certificates and begin the renewal process as the expiration approaches. It has a very careful retry mechanism that ensures your certificates are updated without tripping any rate limits at the certificate provider."
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Further reading",
      "text": "Further reading",
      "level": 1
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Caddy's detailed documentation about  Automatic HTTPS  and the  tls configuration directive  should answer most questions about how the process works.",
      "text": "Caddy's detailed documentation about  Automatic HTTPS  and the  tls configuration directive  should answer most questions about how the process works."
    }
  ],
  "pictures": [
    {
      "self_ref": "#/pictures/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "picture",
      "prov": [],
      "captions": [],
      "references": [],
      "footnotes": [],
      "annotations": []
    },
    {
      "self_ref": "#/pictures/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "picture",
      "prov": [],
      "captions": [
        {
          "$ref": "#/texts/25"
        }
      ],
      "references": [],
      "footnotes": [],
      "annotations": []
    }
  ],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}