{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "myfile",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 8088530438577368901,
    "filename": "myfile.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/texts/1"
      },
      {
        "$ref": "#/texts/2"
      },
      {
        "$ref": "#/texts/3"
      },
      {
        "$ref": "#/texts/4"
      },
      {
        "$ref": "#/texts/5"
      },
      {
        "$ref": "#/texts/6"
      },
      {
        "$ref": "#/texts/7"
      },
      {
        "$ref": "#/texts/8"
      },
      {
        "$ref": "#/texts/9"
      },
      {
        "$ref": "#/texts/10"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/texts/13"
      },
      {
        "$ref": "#/texts/14"
      },
      {
        "$ref": "#/texts/15"
      },
      {
        "$ref": "#/texts/16"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "One of the most interesting topics I've seen so far during my  RHCA  training at  Rackspace  this week is  SystemTap . In short, SystemTap allows you to dig out a bunch of details about your running system relatively easily. It takes scripts, converts them to C, builds a kernel module, and then runs the code within your script.",
      "text": "One of the most interesting topics I've seen so far during my  RHCA  training at  Rackspace  this week is  SystemTap . In short, SystemTap allows you to dig out a bunch of details about your running system relatively easily. It takes scripts, converts them to C, builds a kernel module, and then runs the code within your script."
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "HOLD IT:  The steps below are  definitely  not meant for those who are new to Linux. Utilizing SystemTap on a production system is a bad idea &#8212; it can chew up significant resources while it runs and it can also cause a running system to kernel panic if you're not careful with the packages you install.",
      "text": "HOLD IT:  The steps below are  definitely  not meant for those who are new to Linux. Utilizing SystemTap on a production system is a bad idea &#8212; it can chew up significant resources while it runs and it can also cause a running system to kernel panic if you're not careful with the packages you install."
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "These instructions will work well with Fedora, CentOS and Red Hat Enterprise Linux. Luckily, the SystemTap folks put together some instructions for  Debian  and  Ubuntu  as well.",
      "text": "These instructions will work well with Fedora, CentOS and Red Hat Enterprise Linux. Luckily, the SystemTap folks put together some instructions for  Debian  and  Ubuntu  as well."
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Before you can start working with SystemTap on your RPM-based distribution, you'll need to get some prerequisites together:",
      "text": "Before you can start working with SystemTap on your RPM-based distribution, you'll need to get some prerequisites together:"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "yum install gcc systemtap systemtap-runtime systemtap-testsuite kernel-devel\nyum --enablerepo=*-debuginfo install kernel-debuginfo kernel-debuginfo-common",
      "text": "yum install gcc systemtap systemtap-runtime systemtap-testsuite kernel-devel\nyum --enablerepo=*-debuginfo install kernel-debuginfo kernel-debuginfo-common",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "WHOA THERE:  Ensure that the kernel-devel and kernel-debuginfo  packages that you install via yum match up with your running kernel. If there's a newer kernel available from your yum repo, yum will pull that one. If it's been a while since you updated, you'll either need to upgrade your current kernel to the latest and reboot or you'll need to hunt down the corresponding kernel-devel and kernel-debuginfo  packages from a repository.  Installing the wrong package version can lead to kernel panics.  Also, bear in mind that the debuginfo packages are quite large: almost 200MB in Red Hat/CentOS and almost 300MB in Fedora.",
      "text": "WHOA THERE:  Ensure that the kernel-devel and kernel-debuginfo  packages that you install via yum match up with your running kernel. If there's a newer kernel available from your yum repo, yum will pull that one. If it's been a while since you updated, you'll either need to upgrade your current kernel to the latest and reboot or you'll need to hunt down the corresponding kernel-devel and kernel-debuginfo  packages from a repository.  Installing the wrong package version can lead to kernel panics.  Also, bear in mind that the debuginfo packages are quite large: almost 200MB in Red Hat/CentOS and almost 300MB in Fedora."
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You can't write the script in just any language. SystemTap uses an odd syntax to get things going:",
      "text": "You can't write the script in just any language. SystemTap uses an odd syntax to get things going:"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "#! /usr/bin/env stap\nprobe begin { println(\"hello world\") exit () }",
      "text": "#! /usr/bin/env stap\nprobe begin { println(\"hello world\") exit () }",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Just run the script with ",
      "text": "Just run the script with "
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "stap",
      "text": "stap",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ":",
      "text": ":"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# stap -v helloworld.stp\nPass 1: parsed user script and 73 library script(s) using 94380virt/21988res/2628shr kb, in 140usr/30sys/167real ms.\nPass 2: analyzed script: 1 probe(s), 1 function(s), 0 embed(s), 0 global(s) using 94776virt/22516res/2692shr kb, in 10usr/0sys/5real ms.\nPass 3: using cached /root/.systemtap/cache/bc/stap_bc368822da380b943d4e845ee15ed047_773.c\nPass 4: using cached /root/.systemtap/cache/bc/stap_bc368822da380b943d4e845ee15ed047_773.ko\nPass 5: starting run.\nhello world\nPass 5: run completed in 0usr/20sys/285real ms.",
      "text": "# stap -v helloworld.stp\nPass 1: parsed user script and 73 library script(s) using 94380virt/21988res/2628shr kb, in 140usr/30sys/167real ms.\nPass 2: analyzed script: 1 probe(s), 1 function(s), 0 embed(s), 0 global(s) using 94776virt/22516res/2692shr kb, in 10usr/0sys/5real ms.\nPass 3: using cached /root/.systemtap/cache/bc/stap_bc368822da380b943d4e845ee15ed047_773.c\nPass 4: using cached /root/.systemtap/cache/bc/stap_bc368822da380b943d4e845ee15ed047_773.ko\nPass 5: starting run.\nhello world\nPass 5: run completed in 0usr/20sys/285real ms.",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The ",
      "text": "The "
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "systemtap-testsuite",
      "text": "systemtap-testsuite",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " package gives you a  tubload  of extremely handy SystemTap scripts. For example:",
      "text": " package gives you a  tubload  of extremely handy SystemTap scripts. For example:"
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# cd /usr/share/systemtap/testsuite/systemtap.examples/io/\n# stap iotime.stp\n15138470 6351 (httpd) access /usr/share/cacti/index.php read: 0 write: 0\n15142243 6351 (httpd) access /usr/share/cacti/include/auth.php read: 0 write: 0\n15143780 6351 (httpd) access /usr/share/cacti/include/global.php read: 0 write: 0\n15144099 6351 (httpd) access /etc/cacti/db.php read: 0 write: 0\n15187641 6351 (httpd) access /usr/share/cacti/lib/adodb/adodb.inc.php read: 106486 write: 0\n15187664 6351 (httpd) iotime /usr/share/cacti/lib/adodb/adodb.inc.php time: 218\n15194965 6351 (httpd) access /usr/share/cacti/lib/adodb/adodb-time.inc.php read: 0 write: 0\n15195692 6351 (httpd) access /usr/share/cacti/lib/adodb/adodb-iterator.inc.php read: 0 write: 0\n   ... output continues ...",
      "text": "# cd /usr/share/systemtap/testsuite/systemtap.examples/io/\n# stap iotime.stp\n15138470 6351 (httpd) access /usr/share/cacti/index.php read: 0 write: 0\n15142243 6351 (httpd) access /usr/share/cacti/include/auth.php read: 0 write: 0\n15143780 6351 (httpd) access /usr/share/cacti/include/global.php read: 0 write: 0\n15144099 6351 (httpd) access /etc/cacti/db.php read: 0 write: 0\n15187641 6351 (httpd) access /usr/share/cacti/lib/adodb/adodb.inc.php read: 106486 write: 0\n15187664 6351 (httpd) iotime /usr/share/cacti/lib/adodb/adodb.inc.php time: 218\n15194965 6351 (httpd) access /usr/share/cacti/lib/adodb/adodb-time.inc.php read: 0 write: 0\n15195692 6351 (httpd) access /usr/share/cacti/lib/adodb/adodb-iterator.inc.php read: 0 write: 0\n   ... output continues ...",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The ",
      "text": "The "
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "iotime.stp",
      "text": "iotime.stp",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " script dumps out the reads and writes occurring on the system in real time. After starting the script above, I accessed my cacti instance on the server and immediately started seeing some reads as apache began picking up PHP files to parse.",
      "text": " script dumps out the reads and writes occurring on the system in real time. After starting the script above, I accessed my cacti instance on the server and immediately started seeing some reads as apache began picking up PHP files to parse."
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Consider a situation in which you need to decrease interrupts on a Linux machine. This is vital for laptops and systems that need to remain in low power states. Some might suggest powertop  for that, but why not give SystemTap a try?",
      "text": "Consider a situation in which you need to decrease interrupts on a Linux machine. This is vital for laptops and systems that need to remain in low power states. Some might suggest powertop  for that, but why not give SystemTap a try?"
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# cd /usr/share/systemtap/testsuite/systemtap.examples/interrupt/\n# stap interrupts-by-dev.stp\n        ohci_hcd:usb3 :      1\n        ohci_hcd:usb4 :      1\n            hda_intel :      1\n                 eth0 :      2\n                 eth0 :      2\n                 eth0 :      2\n                 eth0 :      2\n                 eth0 :      2\n                 eth0 :      2",
      "text": "# cd /usr/share/systemtap/testsuite/systemtap.examples/interrupt/\n# stap interrupts-by-dev.stp\n        ohci_hcd:usb3 :      1\n        ohci_hcd:usb4 :      1\n            hda_intel :      1\n                 eth0 :      2\n                 eth0 :      2\n                 eth0 :      2\n                 eth0 :      2\n                 eth0 :      2\n                 eth0 :      2",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "On this particular system, it's pretty obvious that the ethernet interface is causing a lot of interrupts.",
      "text": "On this particular system, it's pretty obvious that the ethernet interface is causing a lot of interrupts."
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If you want more examples, keep hunting around in the systemtap-testsuite package (remember ",
      "text": "If you want more examples, keep hunting around in the systemtap-testsuite package (remember "
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "rpm -ql systemtap-testsuite",
      "text": "rpm -ql systemtap-testsuite",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ") or review the  giant list of examples  on SystemTap's site.",
      "text": ") or review the  giant list of examples  on SystemTap's site."
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Thanks again to Phil Hopkins at Rackspace for giving us a detailed explanation of system profiling during training.",
      "text": "Thanks again to Phil Hopkins at Rackspace for giving us a detailed explanation of system profiling during training."
    }
  ],
  "pictures": [],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}