{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "index",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 1925948885267625819,
    "filename": "index.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/6"
      },
      {
        "$ref": "#/texts/7"
      },
      {
        "$ref": "#/texts/8"
      },
      {
        "$ref": "#/texts/9"
      },
      {
        "$ref": "#/texts/10"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/texts/13"
      },
      {
        "$ref": "#/texts/14"
      },
      {
        "$ref": "#/texts/15"
      },
      {
        "$ref": "#/texts/16"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/texts/30"
      },
      {
        "$ref": "#/texts/31"
      },
      {
        "$ref": "#/texts/32"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/texts/34"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/texts/38"
      },
      {
        "$ref": "#/texts/39"
      },
      {
        "$ref": "#/texts/40"
      },
      {
        "$ref": "#/texts/41"
      },
      {
        "$ref": "#/texts/42"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/texts/44"
      },
      {
        "$ref": "#/texts/45"
      },
      {
        "$ref": "#/texts/46"
      },
      {
        "$ref": "#/texts/47"
      },
      {
        "$ref": "#/texts/48"
      },
      {
        "$ref": "#/texts/49"
      },
      {
        "$ref": "#/texts/50"
      },
      {
        "$ref": "#/texts/51"
      },
      {
        "$ref": "#/texts/52"
      },
      {
        "$ref": "#/texts/53"
      },
      {
        "$ref": "#/texts/54"
      },
      {
        "$ref": "#/texts/55"
      },
      {
        "$ref": "#/texts/56"
      },
      {
        "$ref": "#/texts/57"
      },
      {
        "$ref": "#/texts/58"
      },
      {
        "$ref": "#/texts/59"
      },
      {
        "$ref": "#/texts/60"
      },
      {
        "$ref": "#/texts/61"
      },
      {
        "$ref": "#/texts/62"
      },
      {
        "$ref": "#/texts/63"
      },
      {
        "$ref": "#/texts/64"
      },
      {
        "$ref": "#/texts/65"
      },
      {
        "$ref": "#/texts/66"
      },
      {
        "$ref": "#/texts/67"
      },
      {
        "$ref": "#/texts/68"
      },
      {
        "$ref": "#/texts/69"
      },
      {
        "$ref": "#/texts/70"
      },
      {
        "$ref": "#/texts/71"
      },
      {
        "$ref": "#/texts/72"
      },
      {
        "$ref": "#/texts/73"
      },
      {
        "$ref": "#/texts/74"
      },
      {
        "$ref": "#/texts/75"
      },
      {
        "$ref": "#/texts/76"
      },
      {
        "$ref": "#/texts/77"
      },
      {
        "$ref": "#/texts/78"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/1"
        },
        {
          "$ref": "#/texts/2"
        },
        {
          "$ref": "#/texts/3"
        },
        {
          "$ref": "#/texts/4"
        },
        {
          "$ref": "#/texts/5"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "aliases:",
      "text": "aliases:"
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "/2019/04/05/inspecting-openshift-cgroups-from-inside-the-pod/",
      "text": "/2019/04/05/inspecting-openshift-cgroups-from-inside-the-pod/",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "openshift",
      "text": "openshift",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "ansible",
      "text": "ansible",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "security",
      "text": "security",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "linux",
      "text": "linux",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "My team at Red Hat builds a lot of kernels in OpenShift pods as part of our work with the  Continuous Kernel Integration (CKI)  project. We have lots of different pod sizes depending on the type of work we are doing and our GitLab runners spawn these pods based on the tags in our GitLab CI pipeline.",
      "text": "My team at Red Hat builds a lot of kernels in OpenShift pods as part of our work with the  Continuous Kernel Integration (CKI)  project. We have lots of different pod sizes depending on the type of work we are doing and our GitLab runners spawn these pods based on the tags in our GitLab CI pipeline."
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Compiling with make",
      "text": "Compiling with make",
      "level": 1
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "When you compile a large software project, such as the Linux kernel, you can use multiple CPU cores to speed up the build. GNU's ",
      "text": "When you compile a large software project, such as the Linux kernel, you can use multiple CPU cores to speed up the build. GNU's "
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "make",
      "text": "make",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " does this with the",
      "text": " does this with the"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "-j",
      "text": "-j",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " argument. Running ",
      "text": " argument. Running "
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "make",
      "text": "make",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " with ",
      "text": " with "
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "-j10",
      "text": "-j10",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " means that you want to run 10 jobs while compiling. This would keep 10 CPU cores busy.",
      "text": " means that you want to run 10 jobs while compiling. This would keep 10 CPU cores busy."
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Setting the number too high causes more contention from the CPU and can reduce performance. Setting the number too low means that you are spending more time compiling than you would if you used all of your CPU cores.",
      "text": "Setting the number too high causes more contention from the CPU and can reduce performance. Setting the number too low means that you are spending more time compiling than you would if you used all of your CPU cores."
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Every once in a while, we adjusted our runners to use a different amount of CPUs or memory and then we had to adjust our pipeline to reflect the new CPU count. This was time consuming and error prone.",
      "text": "Every once in a while, we adjusted our runners to use a different amount of CPUs or memory and then we had to adjust our pipeline to reflect the new CPU count. This was time consuming and error prone."
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Many people just use ",
      "text": "Many people just use "
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "nproc",
      "text": "nproc",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " to determine the CPU core count. It works well with make:",
      "text": " to determine the CPU core count. It works well with make:"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "make -j$(nproc)",
      "text": "make -j$(nproc)",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Problems with containers",
      "text": "Problems with containers",
      "level": 1
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The handy ",
      "text": "The handy "
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "nproc",
      "text": "nproc",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " doesn't work well for OpenShift. If you start a pod on OpenShift and limit it to a single CPU core, ",
      "text": " doesn't work well for OpenShift. If you start a pod on OpenShift and limit it to a single CPU core, "
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "nproc",
      "text": "nproc",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " tells you something very wrong:",
      "text": " tells you something very wrong:"
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ nproc\n32",
      "text": "$ nproc\n32",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We applied the single CPU limit with OpenShift, so what's the problem? The issue is how ",
      "text": "We applied the single CPU limit with OpenShift, so what's the problem? The issue is how "
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "nproc",
      "text": "nproc",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " looks for CPUs. Here's a snippet of ",
      "text": " looks for CPUs. Here's a snippet of "
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "strace",
      "text": "strace",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " output:",
      "text": " output:"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "sched_getaffinity(0, 128, [0, 1, 2, 3, 4, 5]) = 8\nfstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x6), ...}) = 0\nwrite(1, \"6\\n\", 26\n)                      = 2",
      "text": "sched_getaffinity(0, 128, [0, 1, 2, 3, 4, 5]) = 8\nfstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x6), ...}) = 0\nwrite(1, \"6\\n\", 26\n)                      = 2",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The  sched_getaffinity  syscall looks to see which CPUs are allowed to run the process and returns a count of those. OpenShift doesn't prevent us from seeing the CPUs of the underlying system (the VM or bare metal host underneath our containers), but it uses cgroups to limit how much CPU time we can use.",
      "text": "The  sched_getaffinity  syscall looks to see which CPUs are allowed to run the process and returns a count of those. OpenShift doesn't prevent us from seeing the CPUs of the underlying system (the VM or bare metal host underneath our containers), but it uses cgroups to limit how much CPU time we can use."
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Reading cgroups",
      "text": "Reading cgroups",
      "level": 1
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Getting cgroup data is easy! Just change into the ",
      "text": "Getting cgroup data is easy! Just change into the "
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/sys/fs/cgroup/",
      "text": "/sys/fs/cgroup/",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " directory and look around:",
      "text": " directory and look around:"
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ cd /sys/fs/cgroup/\n$ ls -al cpu/\nls: cannot open directory 'cpu/': Permission denied",
      "text": "$ cd /sys/fs/cgroup/\n$ ls -al cpu/\nls: cannot open directory 'cpu/': Permission denied",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Ouch.  OpenShift makes this a little more challenging. We're not allowed to wander around in the land of cgroups without a map to exactly what we want.",
      "text": "Ouch.  OpenShift makes this a little more challenging. We're not allowed to wander around in the land of cgroups without a map to exactly what we want."
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "My Fedora workstation shows a bunch of CPU cgroup settings:",
      "text": "My Fedora workstation shows a bunch of CPU cgroup settings:"
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ ls -al /sys/fs/cgroup/cpu/\ntotal 0\ndr-xr-xr-x.  2 root root   0 Apr  5 01:40 .\ndrwxr-xr-x. 14 root root 360 Apr  5 01:40 ..\n-rw-r--r--.  1 root root   0 Apr  5 13:08 cgroup.clone_children\n-rw-r--r--.  1 root root   0 Apr  5 01:40 cgroup.procs\n-r--r--r--.  1 root root   0 Apr  5 13:08 cgroup.sane_behavior\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.stat\n-rw-r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_all\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_percpu\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_percpu_sys\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_percpu_user\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_sys\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_user\n-rw-r--r--.  1 root root   0 Apr  5 09:10 cpu.cfs_period_us\n-rw-r--r--.  1 root root   0 Apr  5 13:08 cpu.cfs_quota_us\n-rw-r--r--.  1 root root   0 Apr  5 09:10 cpu.shares\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpu.stat\n-rw-r--r--.  1 root root   0 Apr  5 13:08 notify_on_release\n-rw-r--r--.  1 root root   0 Apr  5 13:08 release_agent\n-rw-r--r--.  1 root root   0 Apr  5 13:08 tasks",
      "text": "$ ls -al /sys/fs/cgroup/cpu/\ntotal 0\ndr-xr-xr-x.  2 root root   0 Apr  5 01:40 .\ndrwxr-xr-x. 14 root root 360 Apr  5 01:40 ..\n-rw-r--r--.  1 root root   0 Apr  5 13:08 cgroup.clone_children\n-rw-r--r--.  1 root root   0 Apr  5 01:40 cgroup.procs\n-r--r--r--.  1 root root   0 Apr  5 13:08 cgroup.sane_behavior\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.stat\n-rw-r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_all\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_percpu\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_percpu_sys\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_percpu_user\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_sys\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpuacct.usage_user\n-rw-r--r--.  1 root root   0 Apr  5 09:10 cpu.cfs_period_us\n-rw-r--r--.  1 root root   0 Apr  5 13:08 cpu.cfs_quota_us\n-rw-r--r--.  1 root root   0 Apr  5 09:10 cpu.shares\n-r--r--r--.  1 root root   0 Apr  5 13:08 cpu.stat\n-rw-r--r--.  1 root root   0 Apr  5 13:08 notify_on_release\n-rw-r--r--.  1 root root   0 Apr  5 13:08 release_agent\n-rw-r--r--.  1 root root   0 Apr  5 13:08 tasks",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "OpenShift uses the  Completely Fair Scheduler (CFS)  to limit CPU time. Here's a quick excerpt from the  kernel documentation :",
      "text": "OpenShift uses the  Completely Fair Scheduler (CFS)  to limit CPU time. Here's a quick excerpt from the  kernel documentation :"
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Quota and period are managed within the cpu subsystem via cgroupfs.",
      "text": "Quota and period are managed within the cpu subsystem via cgroupfs."
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "cpu.cfs_quota_us: the total available run-time within a period (in microseconds) cpu.cfs_period_us: the length of a period (in microseconds) cpu.stat: exports throttling statistics [explained further below]",
      "text": "cpu.cfs_quota_us: the total available run-time within a period (in microseconds) cpu.cfs_period_us: the length of a period (in microseconds) cpu.stat: exports throttling statistics [explained further below]"
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The default values are: cpu.cfs_period_us=100ms cpu.cfs_quota=-1",
      "text": "The default values are: cpu.cfs_period_us=100ms cpu.cfs_quota=-1"
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "A value of -1 for cpu.cfs_quota_us indicates that the group does not have any bandwidth restriction in place, such a group is described as an unconstrained bandwidth group.  This represents the traditional work-conserving behavior for CFS.",
      "text": "A value of -1 for cpu.cfs_quota_us indicates that the group does not have any bandwidth restriction in place, such a group is described as an unconstrained bandwidth group.  This represents the traditional work-conserving behavior for CFS."
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Writing any (valid) positive value(s) will enact the specified bandwidth limit. The minimum quota allowed for the quota or period is 1ms.  There is also an upper bound on the period length of 1s.  Additional restrictions exist when bandwidth limits are used in a hierarchical fashion, these are explained in more detail below.",
      "text": "Writing any (valid) positive value(s) will enact the specified bandwidth limit. The minimum quota allowed for the quota or period is 1ms.  There is also an upper bound on the period length of 1s.  Additional restrictions exist when bandwidth limits are used in a hierarchical fashion, these are explained in more detail below."
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Writing any negative value to cpu.cfs_quota_us will remove the bandwidth limit and return the group to an unconstrained state once more.",
      "text": "Writing any negative value to cpu.cfs_quota_us will remove the bandwidth limit and return the group to an unconstrained state once more."
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Any updates to a group's bandwidth specification will result in it becoming unthrottled if it is in a constrained state.",
      "text": "Any updates to a group's bandwidth specification will result in it becoming unthrottled if it is in a constrained state."
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's see if inspecting ",
      "text": "Let's see if inspecting "
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "cpu.cfs_quota_us",
      "text": "cpu.cfs_quota_us",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " can help us:",
      "text": " can help us:"
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us\n10000",
      "text": "$ cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us\n10000",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Now we're getting somewhere. But what does  10000  mean here? OpenShift operates on the concept of  millicores  of CPU time, or 1/1000 of a CPU. 500 millicores is half a CPU and 1000 millicores is a whole CPU.",
      "text": "Now we're getting somewhere. But what does  10000  mean here? OpenShift operates on the concept of  millicores  of CPU time, or 1/1000 of a CPU. 500 millicores is half a CPU and 1000 millicores is a whole CPU."
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The pod in this example is assigned 100 millicores. Now we know that we can take the output of ",
      "text": "The pod in this example is assigned 100 millicores. Now we know that we can take the output of "
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/sys/fs/cgroup/cpu/cpu.cfs_quota_us",
      "text": "/sys/fs/cgroup/cpu/cpu.cfs_quota_us",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ", divide by 100, and get our millicores.",
      "text": ", divide by 100, and get our millicores."
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We can make a script like this:",
      "text": "We can make a script like this:"
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "CFS_QUOTA=$(cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us)\nif [ $CFS_QUOTA -lt 100000 ]; then\n  CPUS_AVAILABLE=1\nelse\n  CPUS_AVAILABLE=$(expr ${CFS_QUOTA} / 100 / 1000)\nfi\necho \"Found ${CPUS_AVAILABLE} CPUS\"\nmake -j${CPUS_AVAILABLE} ...",
      "text": "CFS_QUOTA=$(cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us)\nif [ $CFS_QUOTA -lt 100000 ]; then\n  CPUS_AVAILABLE=1\nelse\n  CPUS_AVAILABLE=$(expr ${CFS_QUOTA} / 100 / 1000)\nfi\necho \"Found ${CPUS_AVAILABLE} CPUS\"\nmake -j${CPUS_AVAILABLE} ...",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/63",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The script checks for the value of the quota and divides by 100,000 to get the number of cores. If the share is set to something less than 100,000, then a core count of 1 is assigned.  (Pro tip: ",
      "text": "The script checks for the value of the quota and divides by 100,000 to get the number of cores. If the share is set to something less than 100,000, then a core count of 1 is assigned.  (Pro tip: "
    },
    {
      "self_ref": "#/texts/64",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "make",
      "text": "make",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/65",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " does not like being told to compile with zero jobs.)",
      "text": " does not like being told to compile with zero jobs.)"
    },
    {
      "self_ref": "#/texts/66",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Reading memory limits",
      "text": "Reading memory limits",
      "level": 1
    },
    {
      "self_ref": "#/texts/67",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "There are other limits you can read and inspect in a pod, including the available RAM. As we found with ",
      "text": "There are other limits you can read and inspect in a pod, including the available RAM. As we found with "
    },
    {
      "self_ref": "#/texts/68",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "nproc",
      "text": "nproc",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/69",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ", ",
      "text": ", "
    },
    {
      "self_ref": "#/texts/70",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "free",
      "text": "free",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/71",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " is not very helpful:",
      "text": " is not very helpful:"
    },
    {
      "self_ref": "#/texts/72",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# An OpenShift pod with 200MB RAM\n$ free -m\n              total        used        free      shared  buff/cache   available\nMem:          32008       12322         880          31       18805       19246\nSwap:             0           0           0",
      "text": "# An OpenShift pod with 200MB RAM\n$ free -m\n              total        used        free      shared  buff/cache   available\nMem:          32008       12322         880          31       18805       19246\nSwap:             0           0           0",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/73",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "But the cgroups tell the truth:",
      "text": "But the cgroups tell the truth:"
    },
    {
      "self_ref": "#/texts/74",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ cat /sys/fs/cgroup/memory/memory.limit_in_bytes\n209715200",
      "text": "$ cat /sys/fs/cgroup/memory/memory.limit_in_bytes\n209715200",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/75",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If you run Java applications in a container, like Jenkins (or Jenkins slaves), be sure to use the ",
      "text": "If you run Java applications in a container, like Jenkins (or Jenkins slaves), be sure to use the "
    },
    {
      "self_ref": "#/texts/76",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "-XX:+UseCGroupMemoryLimitForHeap",
      "text": "-XX:+UseCGroupMemoryLimitForHeap",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/77",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " option. That will cause Java to look at the cgroups to determine its heap size.",
      "text": " option. That will cause Java to look at the cgroups to determine its heap size."
    },
    {
      "self_ref": "#/texts/78",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Photo credit:  Wikipedia",
      "text": "Photo credit:  Wikipedia"
    }
  ],
  "pictures": [],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}