{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "index",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 10521297319251773099,
    "filename": "index.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/6"
      },
      {
        "$ref": "#/texts/7"
      },
      {
        "$ref": "#/texts/8"
      },
      {
        "$ref": "#/texts/9"
      },
      {
        "$ref": "#/texts/10"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/texts/13"
      },
      {
        "$ref": "#/texts/14"
      },
      {
        "$ref": "#/texts/15"
      },
      {
        "$ref": "#/texts/16"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/texts/30"
      },
      {
        "$ref": "#/texts/31"
      },
      {
        "$ref": "#/texts/32"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/texts/34"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/texts/38"
      },
      {
        "$ref": "#/texts/39"
      },
      {
        "$ref": "#/texts/40"
      },
      {
        "$ref": "#/texts/41"
      },
      {
        "$ref": "#/texts/42"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/texts/44"
      },
      {
        "$ref": "#/texts/45"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/1"
        },
        {
          "$ref": "#/texts/2"
        },
        {
          "$ref": "#/texts/3"
        },
        {
          "$ref": "#/texts/4"
        },
        {
          "$ref": "#/texts/5"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "aliases:",
      "text": "aliases:"
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "/2019/03/22/running-ansible-in-openshift-with-arbitrary-uids/",
      "text": "/2019/03/22/running-ansible-in-openshift-with-arbitrary-uids/",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "openshift",
      "text": "openshift",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "ansible",
      "text": "ansible",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "security",
      "text": "security",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "gitlab",
      "text": "gitlab",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "My work at Red Hat involves testing lots and lots of kernels from various sources and we use  GitLab CE  to manage many of our repositories and run our CI jobs. Those jobs run in  thousands  of  OpenShift  containers that we spawn every day.",
      "text": "My work at Red Hat involves testing lots and lots of kernels from various sources and we use  GitLab CE  to manage many of our repositories and run our CI jobs. Those jobs run in  thousands  of  OpenShift  containers that we spawn every day."
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "OpenShift has some handy security features that we like. First, each container is mounted read-only with some writable temporary space (and any volumes that you mount). Also, OpenShift uses  arbitrarily assigned user IDs UIDs  for each container.",
      "text": "OpenShift has some handy security features that we like. First, each container is mounted read-only with some writable temporary space (and any volumes that you mount). Also, OpenShift uses  arbitrarily assigned user IDs UIDs  for each container."
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Constantly changing UIDs provide some good protection against container engine vulnerabilities, but they can be a pain if you have a script or application that depends on being able to resolve a UID or GID back to a real user or group account.",
      "text": "Constantly changing UIDs provide some good protection against container engine vulnerabilities, but they can be a pain if you have a script or application that depends on being able to resolve a UID or GID back to a real user or group account."
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Ansible and UIDs",
      "text": "Ansible and UIDs",
      "level": 1
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If you run an Ansible playbook within OpenShift, you will likely run into a problem during the fact gathering process:",
      "text": "If you run an Ansible playbook within OpenShift, you will likely run into a problem during the fact gathering process:"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ ansible-playbook -i hosts playbook.yml\n\nPLAY [all] *********************************************************************\n\nTASK [Gathering Facts] *********************************************************\nAn exception occurred during task execution. To see the full traceback, use -vvv.\nThe error was: KeyError: 'getpwuid(): uid not found: 1000220000'\nfatal: [localhost]: FAILED! => {\"msg\": \"Unexpected failure during module execution.\", \"stdout\": \"\"}\n\tto retry, use: --limit @/major-ansible-messaround/playbook.retry\n\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=0    changed=0    unreachable=0    failed=1",
      "text": "$ ansible-playbook -i hosts playbook.yml\n\nPLAY [all] *********************************************************************\n\nTASK [Gathering Facts] *********************************************************\nAn exception occurred during task execution. To see the full traceback, use -vvv.\nThe error was: KeyError: 'getpwuid(): uid not found: 1000220000'\nfatal: [localhost]: FAILED! => {\"msg\": \"Unexpected failure during module execution.\", \"stdout\": \"\"}\n\tto retry, use: --limit @/major-ansible-messaround/playbook.retry\n\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=0    changed=0    unreachable=0    failed=1",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This exception is telling us that  getpwuid()  was not able to find an entry in ",
      "text": "This exception is telling us that  getpwuid()  was not able to find an entry in "
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/etc/passwd",
      "text": "/etc/passwd",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " for our UID (",
      "text": " for our UID ("
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "1000220000",
      "text": "1000220000",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " in this container).",
      "text": " in this container)."
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "One option would be to adjust the playbook so that we skip the fact gathering process:",
      "text": "One option would be to adjust the playbook so that we skip the fact gathering process:"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "- hosts: all\n  gather_facts: no\n  tasks:\n\n    - name: Run tests\n      command: ./run_tests.sh",
      "text": "- hosts: all\n  gather_facts: no\n  tasks:\n\n    - name: Run tests\n      command: ./run_tests.sh",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "However, this might not be helpful if you need facts to be gathered for your playbook to run. In that case, you need to make some adjustments to your container image first.",
      "text": "However, this might not be helpful if you need facts to be gathered for your playbook to run. In that case, you need to make some adjustments to your container image first."
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Updating the container",
      "text": "Updating the container",
      "level": 1
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Nothing in the container image is writable within OpenShift, but we can change certain files to be group writable for the root user since every OpenShift user has an effective GID of ",
      "text": "Nothing in the container image is writable within OpenShift, but we can change certain files to be group writable for the root user since every OpenShift user has an effective GID of "
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "0",
      "text": "0",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ".",
      "text": "."
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "When you build your container, add a line to your Dockerfile to allow the container user to have group write access to ",
      "text": "When you build your container, add a line to your Dockerfile to allow the container user to have group write access to "
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/etc/passwd",
      "text": "/etc/passwd",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " and ",
      "text": " and "
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/etc/group",
      "text": "/etc/group",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ":",
      "text": ":"
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# Make Ansible happy with arbitrary UID/GID in OpenShift.\nRUN chmod g=u /etc/passwd /etc/group",
      "text": "# Make Ansible happy with arbitrary UID/GID in OpenShift.\nRUN chmod g=u /etc/passwd /etc/group",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Once your container has finished building, the permissions on both files should look like this:",
      "text": "Once your container has finished building, the permissions on both files should look like this:"
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ ls -al /etc/passwd /etc/group\n-rw-rw-r--. 1 root root 514 Mar 20 18:12 /etc/group\n-rw-rw-r--. 1 root root 993 Mar 20 18:12 /etc/passwd",
      "text": "$ ls -al /etc/passwd /etc/group\n-rw-rw-r--. 1 root root 514 Mar 20 18:12 /etc/group\n-rw-rw-r--. 1 root root 993 Mar 20 18:12 /etc/passwd",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Make a user account",
      "text": "Make a user account",
      "level": 1
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Now that we've made these files writable for our user in OpenShift, it's time to change how we run our GitLab CI job. My job YAML currently looks like this:",
      "text": "Now that we've made these files writable for our user in OpenShift, it's time to change how we run our GitLab CI job. My job YAML currently looks like this:"
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "ansible_test:\n  image: docker.io/major/ansible:fedora29\n  script:\n    - ansible-playbook -i hosts playbook.yml",
      "text": "ansible_test:\n  image: docker.io/major/ansible:fedora29\n  script:\n    - ansible-playbook -i hosts playbook.yml",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We can add two lines that allow us to make a temporary user and group account for our OpenShift user:",
      "text": "We can add two lines that allow us to make a temporary user and group account for our OpenShift user:"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "ansible_test:\n  image: docker.io/major/ansible:fedora29\n  script:\n    - echo \"tempuser:x:$(id -u):$(id -g):,,,:${HOME}:/bin/bash\" >> /etc/passwd\n    - echo \"tempuser:x:$(id -G | cut -d' ' -f 2)\" >> /etc/group\n    - id\n    - ansible-playbook -i hosts playbook.yml",
      "text": "ansible_test:\n  image: docker.io/major/ansible:fedora29\n  script:\n    - echo \"tempuser:x:$(id -u):$(id -g):,,,:${HOME}:/bin/bash\" >> /etc/passwd\n    - echo \"tempuser:x:$(id -G | cut -d' ' -f 2)\" >> /etc/group\n    - id\n    - ansible-playbook -i hosts playbook.yml",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Note that we want the second GID returned by ",
      "text": "Note that we want the second GID returned by "
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "id",
      "text": "id",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " since the first one is ",
      "text": " since the first one is "
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "0",
      "text": "0",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ". The ",
      "text": ". The "
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "id",
      "text": "id",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " command helps us check our work when the container starts. When the CI job starts, we should see some better output:",
      "text": " command helps us check our work when the container starts. When the CI job starts, we should see some better output:"
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ echo \"tempuser:x:$(id -u):$(id -g):,,,:${HOME}:/bin/bash\" >> /etc/passwd\n$ echo \"tempuser:x:$(id -G | cut -d' ' -f 2)\" >> /etc/group\n$ id\nuid=1000220000(tempuser) gid=0(root) groups=0(root),1000220000(tempuser)\n$ ansible-playbook -i hosts playbook.yml\n\nPLAY [all] *********************************************************************\n\nTASK [Gathering Facts] *********************************************************\nok: [localhost]\n\nTASK [Download kernel source] **************************************************\nchanged: [localhost]\n\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=2    changed=1    unreachable=0    failed=0",
      "text": "$ echo \"tempuser:x:$(id -u):$(id -g):,,,:${HOME}:/bin/bash\" >> /etc/passwd\n$ echo \"tempuser:x:$(id -G | cut -d' ' -f 2)\" >> /etc/group\n$ id\nuid=1000220000(tempuser) gid=0(root) groups=0(root),1000220000(tempuser)\n$ ansible-playbook -i hosts playbook.yml\n\nPLAY [all] *********************************************************************\n\nTASK [Gathering Facts] *********************************************************\nok: [localhost]\n\nTASK [Download kernel source] **************************************************\nchanged: [localhost]\n\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=2    changed=1    unreachable=0    failed=0",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Success!",
      "text": "Success!"
    }
  ],
  "pictures": [],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}