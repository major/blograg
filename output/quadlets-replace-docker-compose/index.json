{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "index",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 11357877219821892517,
    "filename": "index.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/8"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/14"
      },
      {
        "$ref": "#/texts/15"
      },
      {
        "$ref": "#/texts/16"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/texts/30"
      },
      {
        "$ref": "#/texts/31"
      },
      {
        "$ref": "#/texts/32"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/texts/34"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/groups/2"
      },
      {
        "$ref": "#/texts/42"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/texts/44"
      },
      {
        "$ref": "#/texts/45"
      },
      {
        "$ref": "#/texts/46"
      },
      {
        "$ref": "#/texts/47"
      },
      {
        "$ref": "#/texts/48"
      },
      {
        "$ref": "#/texts/49"
      },
      {
        "$ref": "#/texts/50"
      },
      {
        "$ref": "#/texts/51"
      },
      {
        "$ref": "#/texts/52"
      },
      {
        "$ref": "#/texts/53"
      },
      {
        "$ref": "#/texts/54"
      },
      {
        "$ref": "#/texts/55"
      },
      {
        "$ref": "#/texts/56"
      },
      {
        "$ref": "#/texts/57"
      },
      {
        "$ref": "#/texts/58"
      },
      {
        "$ref": "#/texts/59"
      },
      {
        "$ref": "#/texts/60"
      },
      {
        "$ref": "#/texts/61"
      },
      {
        "$ref": "#/texts/62"
      },
      {
        "$ref": "#/texts/63"
      },
      {
        "$ref": "#/texts/64"
      },
      {
        "$ref": "#/texts/65"
      },
      {
        "$ref": "#/texts/66"
      },
      {
        "$ref": "#/texts/67"
      },
      {
        "$ref": "#/texts/68"
      },
      {
        "$ref": "#/texts/69"
      },
      {
        "$ref": "#/texts/70"
      },
      {
        "$ref": "#/texts/71"
      },
      {
        "$ref": "#/texts/72"
      },
      {
        "$ref": "#/texts/73"
      },
      {
        "$ref": "#/texts/74"
      },
      {
        "$ref": "#/texts/75"
      },
      {
        "$ref": "#/texts/76"
      },
      {
        "$ref": "#/texts/77"
      },
      {
        "$ref": "#/texts/78"
      },
      {
        "$ref": "#/texts/79"
      },
      {
        "$ref": "#/texts/80"
      },
      {
        "$ref": "#/texts/81"
      },
      {
        "$ref": "#/texts/82"
      },
      {
        "$ref": "#/texts/83"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/1"
        },
        {
          "$ref": "#/texts/2"
        },
        {
          "$ref": "#/texts/3"
        },
        {
          "$ref": "#/texts/4"
        },
        {
          "$ref": "#/texts/5"
        },
        {
          "$ref": "#/texts/6"
        },
        {
          "$ref": "#/texts/7"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/9"
        },
        {
          "$ref": "#/texts/10"
        },
        {
          "$ref": "#/texts/11"
        },
        {
          "$ref": "#/texts/12"
        },
        {
          "$ref": "#/texts/13"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/38"
        },
        {
          "$ref": "#/texts/39"
        },
        {
          "$ref": "#/texts/40"
        },
        {
          "$ref": "#/texts/41"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "author: Major Hayden date: '2023-09-25' summary: > Sure, docker-compose is great, but could we get similar functionality using just the tools that are built into CoreOS? Can we get automatic updates, too? Yes we can! \ud83d\udce6 tags:",
      "text": "author: Major Hayden date: '2023-09-25' summary: > Sure, docker-compose is great, but could we get similar functionality using just the tools that are built into CoreOS? Can we get automatic updates, too? Yes we can! \ud83d\udce6 tags:"
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "containers",
      "text": "containers",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "coreos",
      "text": "coreos",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "docker",
      "text": "docker",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "fedora",
      "text": "fedora",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "linux",
      "text": "linux",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "podman",
      "text": "podman",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "wordpress",
      "text": "wordpress",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I've  written a lot about containers  on this blog. Why do I love containers so much?",
      "text": "I've  written a lot about containers  on this blog. Why do I love containers so much?"
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "They start quickly",
      "text": "They start quickly",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "They make your workloads portable",
      "text": "They make your workloads portable",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "They disconnect your application stack from the OS that runs underneath",
      "text": "They disconnect your application stack from the OS that runs underneath",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You can send your application through CI as a single container image",
      "text": "You can send your application through CI as a single container image",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You can isolate workloads on the network and limit their resource usage much like a VM",
      "text": "You can isolate workloads on the network and limit their resource usage much like a VM",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "However, I'm still addicted to  docker-compose . Can podman's  quadlets  change that?",
      "text": "However, I'm still addicted to  docker-compose . Can podman's  quadlets  change that?"
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Yes, I think they can.",
      "text": "Yes, I think they can."
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "What's a quadlet?",
      "text": "What's a quadlet?"
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Podman introduced support for quadlets in version 4.4 and it's a simpler way of letting systemd manage your containers. There was an option in the past to have podman generate systemd unit files, but those were unwieldy and full of podman command line options inside a unit file. These unit files weren't easy to edit or even parse with eyeballs.",
      "text": "Podman introduced support for quadlets in version 4.4 and it's a simpler way of letting systemd manage your containers. There was an option in the past to have podman generate systemd unit files, but those were unwieldy and full of podman command line options inside a unit file. These unit files weren't easy to edit or even parse with eyeballs."
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Quadlets make this easier by giving you a simple ini-style file that you can easily read and edit. This blog post will include some quadlets later, but here's an example one for Wordpress:",
      "text": "Quadlets make this easier by giving you a simple ini-style file that you can easily read and edit. This blog post will include some quadlets later, but here's an example one for Wordpress:"
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[Unit]\nDescription=Wordpress Quadlet\n\n[Container]\nImage=docker.io/library/wordpress:fpm\nContainerName=wordpress\nAutoUpdate=registry\nEnvironmentFile=/home/core/.config/containers/containers-environment\nVolume=wordpress.volume:/var/www/html\nNetwork=wordpress.network\n\n[Service]\nRestart=always\nTimeoutStartSec=900\n\n[Install]\nWantedBy=caddy.service multi-user.target default.target",
      "text": "[Unit]\nDescription=Wordpress Quadlet\n\n[Container]\nImage=docker.io/library/wordpress:fpm\nContainerName=wordpress\nAutoUpdate=registry\nEnvironmentFile=/home/core/.config/containers/containers-environment\nVolume=wordpress.volume:/var/www/html\nNetwork=wordpress.network\n\n[Service]\nRestart=always\nTimeoutStartSec=900\n\n[Install]\nWantedBy=caddy.service multi-user.target default.target",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Lots of the lines under ",
      "text": "Lots of the lines under "
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[Container]",
      "text": "[Container]",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " should look familiar to most readers who have worked with containers before. However, there's something new here.",
      "text": " should look familiar to most readers who have worked with containers before. However, there's something new here."
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Check out the ",
      "text": "Check out the "
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "AutoUpdate=registry",
      "text": "AutoUpdate=registry",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " line. This tells podman to keep your container updated on a regular basis with the upstream container registry. I've used  watchtower  in the past for this, but it requires a privileged container and it's yet another external dependency.",
      "text": " line. This tells podman to keep your container updated on a regular basis with the upstream container registry. I've used  watchtower  in the past for this, but it requires a privileged container and it's yet another external dependency."
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Also, at the very end, you'll see a ",
      "text": "Also, at the very end, you'll see a "
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "WantedBy",
      "text": "WantedBy",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " line. This is a great place to set up container dependencies. In this example, the container that runs ",
      "text": " line. This is a great place to set up container dependencies. In this example, the container that runs "
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "caddy",
      "text": "caddy",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " (a web server) can't start until Wordpress is up and running.",
      "text": " (a web server) can't start until Wordpress is up and running."
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "So why not stick with docker-compose?",
      "text": "So why not stick with docker-compose?"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "There's no denying that docker-compose is an awesome tool. You specify the desired outcome, tell it to bring up containers, and it gets containers into the state you specified. It handles volumes, networks, and complicated configuration without a lot of legwork. The YAML files are pretty easy to read, too.",
      "text": "There's no denying that docker-compose is an awesome tool. You specify the desired outcome, tell it to bring up containers, and it gets containers into the state you specified. It handles volumes, networks, and complicated configuration without a lot of legwork. The YAML files are pretty easy to read, too."
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "However, as with watchtower, that's another external dependency.",
      "text": "However, as with watchtower, that's another external dependency."
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "My container deployments are often done at instance boot time and I don't make too many changes afterwards. I found myself using docker-compose for the initial deployment and then I didn't really use it again.",
      "text": "My container deployments are often done at instance boot time and I don't make too many changes afterwards. I found myself using docker-compose for the initial deployment and then I didn't really use it again."
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Why not remove it entirely and use what's built into CoreOS already?",
      "text": "Why not remove it entirely and use what's built into CoreOS already?"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Quaint quadlets quickly!",
      "text": "Quaint quadlets quickly!"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Before we start, we're going to need a few things:",
      "text": "Before we start, we're going to need a few things:"
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "An easy to read ",
      "text": "An easy to read ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Some quadlets",
      "text": "Some quadlets",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Extra system configuration",
      "text": "Extra system configuration",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "A cloud provider with CoreOS images ",
      "text": "A cloud provider with CoreOS images ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I've packed all of these items into my  quadlets-wordpress  repository to make it easy. Start by looking at the  config.butane  file.",
      "text": "I've packed all of these items into my  quadlets-wordpress  repository to make it easy. Start by looking at the  config.butane  file."
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's break it down here. First up, we add an ssh key for the default ",
      "text": "Let's break it down here. First up, we add an ssh key for the default "
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "core",
      "text": "core",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " user.",
      "text": " user."
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "variant: fcos\nversion: 1.5.0\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDyoH6gU4lgEiSiwihyD0Rxk/o5xYIfA3stVDgOGM9N0",
      "text": "variant: fcos\nversion: 1.5.0\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDyoH6gU4lgEiSiwihyD0Rxk/o5xYIfA3stVDgOGM9N0",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Next up, we enable the ",
      "text": "Next up, we enable the "
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "podman-auto-update.timer",
      "text": "podman-auto-update.timer",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " so we get container updates automatically:",
      "text": " so we get container updates automatically:"
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "storage:\n  links:\n    - path: /home/core/.config/systemd/user/timers.target.wants/podman-auto-update.timer\n      target: /usr/lib/systemd/user/podman-auto-update.timer\n      user:\n        name: core\n      group:\n        name: core",
      "text": "storage:\n  links:\n    - path: /home/core/.config/systemd/user/timers.target.wants/podman-auto-update.timer\n      target: /usr/lib/systemd/user/podman-auto-update.timer\n      user:\n        name: core\n      group:\n        name: core",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Next is the long ",
      "text": "Next is the long "
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "files",
      "text": "files",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " section:",
      "text": " section:"
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "files:\n    # Ensure the `core` user can keep processes running after they're logged out.\n    - path: /var/lib/systemd/linger/core\n      mode: 0644\n    \n    # Allow caddy to listen on 80 and 443.\n    # Allow it to ask for bigger network buffers, too.\n    - path: /etc/sysctl.d/90-caddy.conf\n      contents:\n        inline: |\n          net.ipv4.ip_unprivileged_port_start = 80\n          net.core.rmem_max=2500000\n          net.core.wmem_max=2500000\n\n    # Set up an an environment file that containers can read to configure themselves.\n    - path: /home/core/.config/containers/containers-environment\n      contents:\n        inline: |\n          MYSQL_DATABASE=wordpress\n          MYSQL_USER=wordpress\n          MYSQL_ROOT_PASSWORD=mariadb-needs-a-secure-password\n          MYSQL_PASSWORD=wordpress-needs-a-secure-password\n          WORDPRESS_DB_HOST=mariadb\n          WORDPRESS_DB_USER=wordpress\n          WORDPRESS_DB_PASSWORD=wordpress-needs-a-secure-password\n          WORDPRESS_DB_NAME=wordpress\n      mode: 0644\n\n    # Deploy the caddy configuration file from the repository.\n    - path: /home/core/.config/caddy/Caddyfile\n      contents:\n        local: caddy/Caddyfile\n      mode: 0644\n      user:\n        name: core\n      group:\n        name: core\n\n    # Add some named volumes for caddy and wordpress.\n    - path: /home/core/.config/containers/systemd/caddy-config.volume\n      contents:\n        inline: |\n          [Volume]\n      user:\n        name: core\n      group:\n        name: core\n    - path: /home/core/.config/containers/systemd/caddy-data.volume\n      contents:\n        inline: |\n          [Volume]\n      user:\n        name: core\n      group:\n        name: core\n    - path: /home/core/.config/containers/systemd/wordpress.volume\n      contents:\n        inline: |\n          [Volume]\n      user:\n        name: core\n      group:\n        name: core\n\n    # Create a network for all the containers to use and enable the\n    # DNS plugin. This allows containers to find each other using\n    # the container names.\n    - path: /home/core/.config/containers/systemd/wordpress.network\n      contents:\n        inline: |\n          [Network]\n          DisableDNS=false\n          Internal=false\n      user:\n        name: core\n      group:\n        name: core\n\n    # Add the wordpress container.\n    - path: /home/core/.config/containers/systemd/wordpress.container\n      contents:\n        local: quadlets/wordpress.container\n      mode: 0644\n      user:\n        name: core\n      group:\n        name: core\n\n    # Add the MariaDB container.\n    - path: /home/core/.config/containers/systemd/mariadb.container\n      contents:\n        local: quadlets/mariadb.container\n      mode: 0644\n      user:\n        name: core\n      group:\n        name: core\n\n    # Add the caddy container.\n    - path: /home/core/.config/containers/systemd/caddy.container\n      contents:\n        local: quadlets/caddy.container\n      mode: 0644\n      user:\n        name: core\n      group:\n        name: core",
      "text": "files:\n    # Ensure the `core` user can keep processes running after they're logged out.\n    - path: /var/lib/systemd/linger/core\n      mode: 0644\n    \n    # Allow caddy to listen on 80 and 443.\n    # Allow it to ask for bigger network buffers, too.\n    - path: /etc/sysctl.d/90-caddy.conf\n      contents:\n        inline: |\n          net.ipv4.ip_unprivileged_port_start = 80\n          net.core.rmem_max=2500000\n          net.core.wmem_max=2500000\n\n    # Set up an an environment file that containers can read to configure themselves.\n    - path: /home/core/.config/containers/containers-environment\n      contents:\n        inline: |\n          MYSQL_DATABASE=wordpress\n          MYSQL_USER=wordpress\n          MYSQL_ROOT_PASSWORD=mariadb-needs-a-secure-password\n          MYSQL_PASSWORD=wordpress-needs-a-secure-password\n          WORDPRESS_DB_HOST=mariadb\n          WORDPRESS_DB_USER=wordpress\n          WORDPRESS_DB_PASSWORD=wordpress-needs-a-secure-password\n          WORDPRESS_DB_NAME=wordpress\n      mode: 0644\n\n    # Deploy the caddy configuration file from the repository.\n    - path: /home/core/.config/caddy/Caddyfile\n      contents:\n        local: caddy/Caddyfile\n      mode: 0644\n      user:\n        name: core\n      group:\n        name: core\n\n    # Add some named volumes for caddy and wordpress.\n    - path: /home/core/.config/containers/systemd/caddy-config.volume\n      contents:\n        inline: |\n          [Volume]\n      user:\n        name: core\n      group:\n        name: core\n    - path: /home/core/.config/containers/systemd/caddy-data.volume\n      contents:\n        inline: |\n          [Volume]\n      user:\n        name: core\n      group:\n        name: core\n    - path: /home/core/.config/containers/systemd/wordpress.volume\n      contents:\n        inline: |\n          [Volume]\n      user:\n        name: core\n      group:\n        name: core\n\n    # Create a network for all the containers to use and enable the\n    # DNS plugin. This allows containers to find each other using\n    # the container names.\n    - path: /home/core/.config/containers/systemd/wordpress.network\n      contents:\n        inline: |\n          [Network]\n          DisableDNS=false\n          Internal=false\n      user:\n        name: core\n      group:\n        name: core\n\n    # Add the wordpress container.\n    - path: /home/core/.config/containers/systemd/wordpress.container\n      contents:\n        local: quadlets/wordpress.container\n      mode: 0644\n      user:\n        name: core\n      group:\n        name: core\n\n    # Add the MariaDB container.\n    - path: /home/core/.config/containers/systemd/mariadb.container\n      contents:\n        local: quadlets/mariadb.container\n      mode: 0644\n      user:\n        name: core\n      group:\n        name: core\n\n    # Add the caddy container.\n    - path: /home/core/.config/containers/systemd/caddy.container\n      contents:\n        local: quadlets/caddy.container\n      mode: 0644\n      user:\n        name: core\n      group:\n        name: core",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The  Caddyfile  is also in the repository and will be deployed by the butane configuration shown above.",
      "text": "The  Caddyfile  is also in the repository and will be deployed by the butane configuration shown above."
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We can go through each quadlet in detail. First up is MariaDB. We tell systemd that the wordpress container will want to have this one started first.",
      "text": "We can go through each quadlet in detail. First up is MariaDB. We tell systemd that the wordpress container will want to have this one started first."
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[Unit]\nDescription=MariaDB Quadlet\n\n[Container]\nImage=docker.io/library/mariadb:11\nContainerName=mariadb\nAutoUpdate=registry\nEnvironmentFile=/home/core/.config/containers/containers-environment\nVolume=mariadb.volume:/var/lib/mysql\nNetwork=wordpress.network\n\n[Service]\nRestart=always\nTimeoutStartSec=900\n\n[Install]\nWantedBy=wordpress.service multi-user.target default.target",
      "text": "[Unit]\nDescription=MariaDB Quadlet\n\n[Container]\nImage=docker.io/library/mariadb:11\nContainerName=mariadb\nAutoUpdate=registry\nEnvironmentFile=/home/core/.config/containers/containers-environment\nVolume=mariadb.volume:/var/lib/mysql\nNetwork=wordpress.network\n\n[Service]\nRestart=always\nTimeoutStartSec=900\n\n[Install]\nWantedBy=wordpress.service multi-user.target default.target",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The wordpress quadlet is much the same as the MariaDB one, but we tell systemd that caddy will want wordpress started first.",
      "text": "The wordpress quadlet is much the same as the MariaDB one, but we tell systemd that caddy will want wordpress started first."
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[Unit]\nDescription=Wordpress Quadlet\n\n[Container]\nImage=docker.io/library/wordpress:fpm\nContainerName=wordpress\nAutoUpdate=registry\nEnvironmentFile=/home/core/.config/containers/containers-environment\nVolume=wordpress.volume:/var/www/html\nNetwork=wordpress.network\n\n[Service]\nRestart=always\nTimeoutStartSec=900\n\n[Install]\nWantedBy=caddy.service multi-user.target default.target",
      "text": "[Unit]\nDescription=Wordpress Quadlet\n\n[Container]\nImage=docker.io/library/wordpress:fpm\nContainerName=wordpress\nAutoUpdate=registry\nEnvironmentFile=/home/core/.config/containers/containers-environment\nVolume=wordpress.volume:/var/www/html\nNetwork=wordpress.network\n\n[Service]\nRestart=always\nTimeoutStartSec=900\n\n[Install]\nWantedBy=caddy.service multi-user.target default.target",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Finally, the caddy quadlet contains four volumes and some published ports. These ports will be published to the container host. Also, you'll note that the wordpress volume is mounted here, too. This is because caddy can serve static files  much faster  than wordpress can.",
      "text": "Finally, the caddy quadlet contains four volumes and some published ports. These ports will be published to the container host. Also, you'll note that the wordpress volume is mounted here, too. This is because caddy can serve static files  much faster  than wordpress can."
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[Unit]\nDescription=Caddy Quadlet\n\n[Container]\nImage=docker.io/library/caddy:latest\nContainerName=caddy\nAutoUpdate=registry\nEnvironmentFile=/home/core/.config/containers/containers-environment\nVolume=caddy-data.volume:/data\nVolume=caddy-config.volume:/config\nVolume=/home/core/.config/caddy/Caddyfile:/etc/caddy/Caddyfile:Z\nVolume=wordpress.volume:/var/www/html\nPublishPort=80:80\nPublishPort=443:443\nNetwork=wordpress.network\n\n[Service]\nRestart=always\nTimeoutStartSec=900\n\n[Install]\nWantedBy=multi-user.target default.target",
      "text": "[Unit]\nDescription=Caddy Quadlet\n\n[Container]\nImage=docker.io/library/caddy:latest\nContainerName=caddy\nAutoUpdate=registry\nEnvironmentFile=/home/core/.config/containers/containers-environment\nVolume=caddy-data.volume:/data\nVolume=caddy-config.volume:/config\nVolume=/home/core/.config/caddy/Caddyfile:/etc/caddy/Caddyfile:Z\nVolume=wordpress.volume:/var/www/html\nPublishPort=80:80\nPublishPort=443:443\nNetwork=wordpress.network\n\n[Service]\nRestart=always\nTimeoutStartSec=900\n\n[Install]\nWantedBy=multi-user.target default.target",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Launch the quadlets",
      "text": "Launch the quadlets"
    },
    {
      "self_ref": "#/texts/63",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "There's a  launch script  that ships this configuration to VULTR and launches a CoreOS instance:",
      "text": "There's a  launch script  that ships this configuration to VULTR and launches a CoreOS instance:"
    },
    {
      "self_ref": "#/texts/64",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "#!/bin/bash\n# This command starts up a CoreOS instance on Vultr using the vultr-cli\nvultr-cli instance create \\\n    --os 391 \\\n    --plan vhp-1c-1gb-amd \\\n    --region dfw \\\n    --notify true \\\n    --ipv6 true \\\n    -u \"$(butane --files-dir . config.butane)\" \\\n    -l \"coreos-$(date \"+%s\")\"",
      "text": "#!/bin/bash\n# This command starts up a CoreOS instance on Vultr using the vultr-cli\nvultr-cli instance create \\\n    --os 391 \\\n    --plan vhp-1c-1gb-amd \\\n    --region dfw \\\n    --notify true \\\n    --ipv6 true \\\n    -u \"$(butane --files-dir . config.butane)\" \\\n    -l \"coreos-$(date \"+%s\")\"",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/65",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "To launch an instance, get your  VULTR API key  first. Then install vultr-cli and butane:",
      "text": "To launch an instance, get your  VULTR API key  first. Then install vultr-cli and butane:"
    },
    {
      "self_ref": "#/texts/66",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ sudo dnf -y install butane vultr-cli",
      "text": "$ sudo dnf -y install butane vultr-cli",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/67",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "After launch, check to see what your containers are doing:",
      "text": "After launch, check to see what your containers are doing:"
    },
    {
      "self_ref": "#/texts/68",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[core@vultr ~]$ podman ps\nCONTAINER ID  IMAGE                            COMMAND               CREATED         STATUS         PORTS                                     NAMES\nafa2d6501593  docker.io/library/caddy:latest   caddy run --confi...  54 seconds ago  Up 53 seconds  0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp  caddy\n460426f39e6c  docker.io/library/mariadb:11     mariadbd              35 seconds ago  Up 35 seconds                                            mariadb\n92ece6538d5a  docker.io/library/wordpress:fpm  php-fpm               28 seconds ago  Up 29 seconds                                            wordpress",
      "text": "[core@vultr ~]$ podman ps\nCONTAINER ID  IMAGE                            COMMAND               CREATED         STATUS         PORTS                                     NAMES\nafa2d6501593  docker.io/library/caddy:latest   caddy run --confi...  54 seconds ago  Up 53 seconds  0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp  caddy\n460426f39e6c  docker.io/library/mariadb:11     mariadbd              35 seconds ago  Up 35 seconds                                            mariadb\n92ece6538d5a  docker.io/library/wordpress:fpm  php-fpm               28 seconds ago  Up 29 seconds                                            wordpress",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/69",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We should be able to talk to wordpress through caddy on port 80:",
      "text": "We should be able to talk to wordpress through caddy on port 80:"
    },
    {
      "self_ref": "#/texts/70",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[core@vultr ~]$ curl -si http://localhost/wp-admin/install.php | head -n 25\nHTTP/1.1 200 OK\nCache-Control: no-cache, must-revalidate, max-age=0\nContent-Type: text/html; charset=utf-8\nExpires: Wed, 11 Jan 1984 05:00:00 GMT\nServer: Caddy\nX-Powered-By: PHP/8.0.30\nDate: Mon, 25 Sep 2023 21:43:40 GMT\nTransfer-Encoding: chunked\n\n<!DOCTYPE html>\n<html lang=\"en-US\" xml:lang=\"en-US\">\n<head>\n\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta name=\"robots\" content=\"noindex,nofollow\" />\n\t<title>WordPress &rsaquo; Installation</title>\n\t<link rel='stylesheet' id='dashicons-css' href='http://localhost/wp-includes/css/dashicons.min.css?ver=6.3.1' type='text/css' media='all' />\n<link rel='stylesheet' id='buttons-css' href='http://localhost/wp-includes/css/buttons.min.css?ver=6.3.1' type='text/css' media='all' />\n<link rel='stylesheet' id='forms-css' href='http://localhost/wp-admin/css/forms.min.css?ver=6.3.1' type='text/css' media='all' />\n<link rel='stylesheet' id='l10n-css' href='http://localhost/wp-admin/css/l10n.min.css?ver=6.3.1' type='text/css' media='all' />\n<link rel='stylesheet' id='install-css' href='http://localhost/wp-admin/css/install.min.css?ver=6.3.1' type='text/css' media='all' />\n</head>\n<body class=\"wp-core-ui language-chooser\">\n<p id=\"logo\">WordPress</p>",
      "text": "[core@vultr ~]$ curl -si http://localhost/wp-admin/install.php | head -n 25\nHTTP/1.1 200 OK\nCache-Control: no-cache, must-revalidate, max-age=0\nContent-Type: text/html; charset=utf-8\nExpires: Wed, 11 Jan 1984 05:00:00 GMT\nServer: Caddy\nX-Powered-By: PHP/8.0.30\nDate: Mon, 25 Sep 2023 21:43:40 GMT\nTransfer-Encoding: chunked\n\n<!DOCTYPE html>\n<html lang=\"en-US\" xml:lang=\"en-US\">\n<head>\n\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta name=\"robots\" content=\"noindex,nofollow\" />\n\t<title>WordPress &rsaquo; Installation</title>\n\t<link rel='stylesheet' id='dashicons-css' href='http://localhost/wp-includes/css/dashicons.min.css?ver=6.3.1' type='text/css' media='all' />\n<link rel='stylesheet' id='buttons-css' href='http://localhost/wp-includes/css/buttons.min.css?ver=6.3.1' type='text/css' media='all' />\n<link rel='stylesheet' id='forms-css' href='http://localhost/wp-admin/css/forms.min.css?ver=6.3.1' type='text/css' media='all' />\n<link rel='stylesheet' id='l10n-css' href='http://localhost/wp-admin/css/l10n.min.css?ver=6.3.1' type='text/css' media='all' />\n<link rel='stylesheet' id='install-css' href='http://localhost/wp-admin/css/install.min.css?ver=6.3.1' type='text/css' media='all' />\n</head>\n<body class=\"wp-core-ui language-chooser\">\n<p id=\"logo\">WordPress</p>",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/71",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Awesome! \ud83c\udf89",
      "text": "Awesome! \ud83c\udf89"
    },
    {
      "self_ref": "#/texts/72",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Managing containers",
      "text": "Managing containers"
    },
    {
      "self_ref": "#/texts/73",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Containers will automatically update on a schedule and you can check the timer:",
      "text": "Containers will automatically update on a schedule and you can check the timer:"
    },
    {
      "self_ref": "#/texts/74",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[core@vultr ~]$ systemctl status --user podman-auto-update.timer\n\u25cf podman-auto-update.timer - Podman auto-update timer\n     Loaded: loaded (/usr/lib/systemd/user/podman-auto-update.timer; enabled; preset: disabled)\n     Active: active (waiting) since Mon 2023-09-25 21:41:31 UTC; 3min 14s ago\n    Trigger: Tue 2023-09-26 00:04:46 UTC; 2h 20min left\n   Triggers: \u25cf podman-auto-update.service\n\nSep 25 21:41:31 vultr.guest systemd[1786]: Started podman-auto-update.timer - Podman auto-update timer.",
      "text": "[core@vultr ~]$ systemctl status --user podman-auto-update.timer\n\u25cf podman-auto-update.timer - Podman auto-update timer\n     Loaded: loaded (/usr/lib/systemd/user/podman-auto-update.timer; enabled; preset: disabled)\n     Active: active (waiting) since Mon 2023-09-25 21:41:31 UTC; 3min 14s ago\n    Trigger: Tue 2023-09-26 00:04:46 UTC; 2h 20min left\n   Triggers: \u25cf podman-auto-update.service\n\nSep 25 21:41:31 vultr.guest systemd[1786]: Started podman-auto-update.timer - Podman auto-update timer.",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/75",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Quadlets are just regular systemd units:",
      "text": "Quadlets are just regular systemd units:"
    },
    {
      "self_ref": "#/texts/76",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[core@vultr ~]$ systemctl list-units --user | grep -i Quadlet\n  caddy.service                                                                       loaded active running Caddy Quadlet\n  mariadb.service                                                                     loaded active running MariaDB Quadlet\n  wordpress.service                                                                   loaded active running Wordpress Quadlet",
      "text": "[core@vultr ~]$ systemctl list-units --user | grep -i Quadlet\n  caddy.service                                                                       loaded active running Caddy Quadlet\n  mariadb.service                                                                     loaded active running MariaDB Quadlet\n  wordpress.service                                                                   loaded active running Wordpress Quadlet",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/77",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "As an example, you can make changes to caddy's config file and restart it easily:",
      "text": "As an example, you can make changes to caddy's config file and restart it easily:"
    },
    {
      "self_ref": "#/texts/78",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "[core@vultr ~]$ systemctl restart --user caddy\n[core@vultr ~]$ systemctl status --user caddy\n\u25cf caddy.service - Caddy Quadlet\n     Loaded: loaded (/var/home/core/.config/containers/systemd/caddy.container; generated)\n    Drop-In: /usr/lib/systemd/user/service.d\n             \u2514\u250010-timeout-abort.conf\n     Active: active (running) since Mon 2023-09-25 21:46:28 UTC; 5s ago\n   Main PID: 2652 (conmon)\n      Tasks: 18 (limit: 1023)\n     Memory: 15.1M\n        CPU: 207ms",
      "text": "[core@vultr ~]$ systemctl restart --user caddy\n[core@vultr ~]$ systemctl status --user caddy\n\u25cf caddy.service - Caddy Quadlet\n     Loaded: loaded (/var/home/core/.config/containers/systemd/caddy.container; generated)\n    Drop-In: /usr/lib/systemd/user/service.d\n             \u2514\u250010-timeout-abort.conf\n     Active: active (running) since Mon 2023-09-25 21:46:28 UTC; 5s ago\n   Main PID: 2652 (conmon)\n      Tasks: 18 (limit: 1023)\n     Memory: 15.1M\n        CPU: 207ms",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/79",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If you need to change a quadlet's configuration, just open up the configuration file in your favorite editor under ",
      "text": "If you need to change a quadlet's configuration, just open up the configuration file in your favorite editor under "
    },
    {
      "self_ref": "#/texts/80",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "~/.config/containers/systemd",
      "text": "~/.config/containers/systemd",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/81",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ", reload systemd, and restart the container:",
      "text": ", reload systemd, and restart the container:"
    },
    {
      "self_ref": "#/texts/82",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ vi ~/.config/containers/systemd/caddy.container\n\n--- make your edits and save the quadlet configuration ---\n\n$ systemctl daemon-reload --user\n$ systemctl restart --user caddy",
      "text": "$ vi ~/.config/containers/systemd/caddy.container\n\n--- make your edits and save the quadlet configuration ---\n\n$ systemctl daemon-reload --user\n$ systemctl restart --user caddy",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/83",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Enjoy!",
      "text": "Enjoy!"
    }
  ],
  "pictures": [],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}