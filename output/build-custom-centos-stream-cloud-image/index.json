{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "myfile",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 17010220740668947683,
    "filename": "myfile.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/texts/1"
      },
      {
        "$ref": "#/texts/2"
      },
      {
        "$ref": "#/texts/3"
      },
      {
        "$ref": "#/texts/4"
      },
      {
        "$ref": "#/texts/5"
      },
      {
        "$ref": "#/texts/6"
      },
      {
        "$ref": "#/texts/7"
      },
      {
        "$ref": "#/texts/8"
      },
      {
        "$ref": "#/texts/9"
      },
      {
        "$ref": "#/texts/10"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/15"
      },
      {
        "$ref": "#/texts/16"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/20"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/texts/30"
      },
      {
        "$ref": "#/texts/31"
      },
      {
        "$ref": "#/texts/32"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/texts/34"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/texts/38"
      },
      {
        "$ref": "#/texts/39"
      },
      {
        "$ref": "#/texts/40"
      },
      {
        "$ref": "#/texts/41"
      },
      {
        "$ref": "#/texts/42"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/texts/44"
      },
      {
        "$ref": "#/texts/45"
      },
      {
        "$ref": "#/texts/46"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/50"
      },
      {
        "$ref": "#/texts/51"
      },
      {
        "$ref": "#/texts/52"
      },
      {
        "$ref": "#/texts/53"
      },
      {
        "$ref": "#/texts/54"
      },
      {
        "$ref": "#/texts/55"
      },
      {
        "$ref": "#/texts/56"
      },
      {
        "$ref": "#/texts/57"
      },
      {
        "$ref": "#/texts/58"
      },
      {
        "$ref": "#/texts/59"
      },
      {
        "$ref": "#/texts/60"
      },
      {
        "$ref": "#/texts/61"
      },
      {
        "$ref": "#/texts/62"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/13"
        },
        {
          "$ref": "#/texts/14"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/47"
        },
        {
          "$ref": "#/texts/48"
        },
        {
          "$ref": "#/texts/49"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "ordered_list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This is my  third post  about  Image Builder , so I guess you could say that I enjoy using it[^biased]. It's a great way to define a custom cloud image, build it, and (optionally) ship it to a supported cloud provider.",
      "text": "This is my  third post  about  Image Builder , so I guess you could say that I enjoy using it[^biased]. It's a great way to define a custom cloud image, build it, and (optionally) ship it to a supported cloud provider."
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This post covers how to build a customized CentOS Stream 9 image along with a custom repository for additional packages. In this case, that's  Extra Packages for Enterprise Linux (EPEL) .",
      "text": "This post covers how to build a customized CentOS Stream 9 image along with a custom repository for additional packages. In this case, that's  Extra Packages for Enterprise Linux (EPEL) ."
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "[^biased]: I once worked on the team that makes Image Builder happen, so I may be a little bit biased. Enjoy the post anyway. \ud83d\ude09",
      "text": "[^biased]: I once worked on the team that makes Image Builder happen, so I may be a little bit biased. Enjoy the post anyway. \ud83d\ude09"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Why do I need a custom image anyway?",
      "text": "Why do I need a custom image anyway?"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Building your own image empowers you to choose which packages you want, which services run at boot time, and where you deploy your image. Some cloud providers may not have an image from the Linux distribution you enjoy most, or they might have an image with the wrong package set.",
      "text": "Building your own image empowers you to choose which packages you want, which services run at boot time, and where you deploy your image. Some cloud providers may not have an image from the Linux distribution you enjoy most, or they might have an image with the wrong package set."
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Some cloud providers build images with too many packages or too few. Sometimes they add configuration that doesn't exist in the OS itself. I've even found some that alter cloud-init and force you to log in directly as the ",
      "text": "Some cloud providers build images with too many packages or too few. Sometimes they add configuration that doesn't exist in the OS itself. I've even found some that alter cloud-init and force you to log in directly as the "
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "root",
      "text": "root",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " user. \ud83d\ude31",
      "text": " user. \ud83d\ude31"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I enjoy building my own images so I know exactly what it contains and I know that the configuration came from the OS itself.",
      "text": "I enjoy building my own images so I know exactly what it contains and I know that the configuration came from the OS itself."
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "First steps",
      "text": "First steps"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This post uses CentOS Stream 9 as an example. You will need a physical host, virtual machine, or cloud instance running CentOS Stream 9 first. We start by installing some packages:",
      "text": "This post uses CentOS Stream 9 as an example. You will need a physical host, virtual machine, or cloud instance running CentOS Stream 9 first. We start by installing some packages:"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ sudo dnf install osbuild-composer weldr-client",
      "text": "$ sudo dnf install osbuild-composer weldr-client",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "What do these packages contain?",
      "text": "What do these packages contain?"
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "[<RawText children='osbuild-composer'>]",
      "text": "[<RawText children='osbuild-composer'>]",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "[<RawText children='weldr-client'>]",
      "text": "[<RawText children='weldr-client'>]",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "One nice thing about this stack is that it starts via systemd's  socket activation  and it only runs when you query it. Let's start the socket now and ensure it comes up on a reboot:",
      "text": "One nice thing about this stack is that it starts via systemd's  socket activation  and it only runs when you query it. Let's start the socket now and ensure it comes up on a reboot:"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ sudo systemctl enable --now osbuild-composer.socket",
      "text": "$ sudo systemctl enable --now osbuild-composer.socket",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Verify that the API is responding:",
      "text": "Verify that the API is responding:"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$ composer-cli status show\nAPI server status:\n    Database version:   0\n    Database supported: true\n    Schema version:     0\n    API version:        1\n    Backend:            osbuild-composer\n    Build:              NEVRA:osbuild-composer-46-1.el9.x86_64",
      "text": "$ composer-cli status show\nAPI server status:\n    Database version:   0\n    Database supported: true\n    Schema version:     0\n    API version:        1\n    Backend:            osbuild-composer\n    Build:              NEVRA:osbuild-composer-46-1.el9.x86_64",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "[^justcomposer]: Most people at Red Hat just call it  composer , but I'll use the full name here to avoid confusion.",
      "text": "[^justcomposer]: Most people at Red Hat just call it  composer , but I'll use the full name here to avoid confusion."
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Adding EPEL",
      "text": "Adding EPEL"
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "CentOS Stream 9 has most of the packages I want, but I really love this program called",
      "text": "CentOS Stream 9 has most of the packages I want, but I really love this program called"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "htop",
      "text": "htop",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " that displays resource usage and allows you to introspect certain processes or namespaces easily. This package is only available in the EPEL repository, so we need to add that one to our list of enabled repositories for image builds.",
      "text": " that displays resource usage and allows you to introspect certain processes or namespaces easily. This package is only available in the EPEL repository, so we need to add that one to our list of enabled repositories for image builds."
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "osbuild-composer  comes with its own set of repositories in the package and does not use the system's repositories. You can list all the enabled repositories that it knows about:",
      "text": "osbuild-composer  comes with its own set of repositories in the package and does not use the system's repositories. You can list all the enabled repositories that it knows about:"
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli sources list\nAppStream\nBaseOS\nRT",
      "text": "# composer-cli sources list\nAppStream\nBaseOS\nRT",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If we want to add EPEL, we can dump the configuration from one of these to a file and edit it:",
      "text": "If we want to add EPEL, we can dump the configuration from one of these to a file and edit it:"
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli sources info AppStream | tee epel.ini\ncheck_gpg = true\ncheck_ssl = true\nid = \"AppStream\"\nname = \"AppStream\"\nrhsm = false\nsystem = true\ntype = \"yum-baseurl\"\nurl = \"https://composes.stream.centos.org/production/latest-CentOS-Stream/compose/AppStream/x86_64/os/\"",
      "text": "# composer-cli sources info AppStream | tee epel.ini\ncheck_gpg = true\ncheck_ssl = true\nid = \"AppStream\"\nname = \"AppStream\"\nrhsm = false\nsystem = true\ntype = \"yum-baseurl\"\nurl = \"https://composes.stream.centos.org/production/latest-CentOS-Stream/compose/AppStream/x86_64/os/\"",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "After editing the EPEL repository file, it should look like this:",
      "text": "After editing the EPEL repository file, it should look like this:"
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "check_gpg = true\ncheck_ssl = true\nid = \"EPEL9\"\nname = \"EPEL9\"\nrhsm = false\nsystem = false\ntype = \"yum-baseurl\"\nurl = \"https://mirrors.kernel.org/fedora-epel/9/Everything/x86_64/\"",
      "text": "check_gpg = true\ncheck_ssl = true\nid = \"EPEL9\"\nname = \"EPEL9\"\nrhsm = false\nsystem = false\ntype = \"yum-baseurl\"\nurl = \"https://mirrors.kernel.org/fedora-epel/9/Everything/x86_64/\"",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You can use any mirror you prefer, but the kernel mirrors are very fast for me from most locations. Now we need to add this repository:",
      "text": "You can use any mirror you prefer, but the kernel mirrors are very fast for me from most locations. Now we need to add this repository:"
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli sources add epel.ini\n# composer-cli sources list\nAppStream\nBaseOS\nEPEL9\nRT",
      "text": "# composer-cli sources add epel.ini\n# composer-cli sources list\nAppStream\nBaseOS\nEPEL9\nRT",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We now have ",
      "text": "We now have "
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "EPEL9",
      "text": "EPEL9",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " in our list. \ud83c\udf89",
      "text": " in our list. \ud83c\udf89"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Define our image",
      "text": "Define our image"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "All image definitions, or blueprints, are in TOML format. Here's my simple one for this post:",
      "text": "All image definitions, or blueprints, are in TOML format. Here's my simple one for this post:"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# Save this file as image.toml\nname = \"centos9\"\ndescription = \"Major's awesome CentOS 9 image\"\nversion = \"0.0.1\"\n\n[[packages]]\nname = \"tmux\"\n\n[[packages]]\nname = \"vim\"\n\n# This is the one that comes from EPEL.\n[[packages]]\nname = \"htop\"",
      "text": "# Save this file as image.toml\nname = \"centos9\"\ndescription = \"Major's awesome CentOS 9 image\"\nversion = \"0.0.1\"\n\n[[packages]]\nname = \"tmux\"\n\n[[packages]]\nname = \"vim\"\n\n# This is the one that comes from EPEL.\n[[packages]]\nname = \"htop\"",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Now we push our blueprint and solve the dependencies to ensure we added our EPEL repository properly:",
      "text": "Now we push our blueprint and solve the dependencies to ensure we added our EPEL repository properly:"
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli blueprints push image.toml\n# composer-cli blueprints depsolve centos9\n    -- SNIP --\n    2:vim-filesystem-8.2.2637-16.el9.noarch\n    which-2.21-27.el9.x86_64\n    xz-5.2.5-7.el9.x86_64\n    xz-libs-5.2.5-7.el9.x86_64\n    zlib-1.2.11-33.el9.x86_64\n    htop-3.1.2-3.el9.x86_64",
      "text": "# composer-cli blueprints push image.toml\n# composer-cli blueprints depsolve centos9\n    -- SNIP --\n    2:vim-filesystem-8.2.2637-16.el9.noarch\n    which-2.21-27.el9.x86_64\n    xz-5.2.5-7.el9.x86_64\n    xz-libs-5.2.5-7.el9.x86_64\n    zlib-1.2.11-33.el9.x86_64\n    htop-3.1.2-3.el9.x86_64",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "And there's ",
      "text": "And there's "
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "htop",
      "text": "htop",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " at the end of the list! \ud83c\udf89",
      "text": " at the end of the list! \ud83c\udf89"
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Make the image",
      "text": "Make the image"
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The fun part has arrived! Let's build an image:",
      "text": "The fun part has arrived! Let's build an image:"
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli compose start centos9 ami --size=4096\nCompose ca57fd64-11ea-41d4-b924-9b8f5bdcaf5e added to the queue",
      "text": "# composer-cli compose start centos9 ami --size=4096\nCompose ca57fd64-11ea-41d4-b924-9b8f5bdcaf5e added to the queue",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This command does a few things:",
      "text": "This command does a few things:"
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Starts an image build with our ",
      "text": "Starts an image build with our ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Outputs an image type that works well on AWS (Amazon Machine Image, or AMI)",
      "text": "Outputs an image type that works well on AWS (Amazon Machine Image, or AMI)",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Limits the image size to 4GB (be sure this is not too large for your preferred",
      "text": "Limits the image size to 4GB (be sure this is not too large for your preferred",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "\ud83e\udd14 Note that you do not need to set the size explicitly here, but I do it as a good measure. When your instance boots, ",
      "text": "\ud83e\udd14 Note that you do not need to set the size explicitly here, but I do it as a good measure. When your instance boots, "
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "cloud-init",
      "text": "cloud-init",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " runs ",
      "text": " runs "
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "growpart",
      "text": "growpart",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " to expand the storage to fit the disk size in your cloud instance.",
      "text": " to expand the storage to fit the disk size in your cloud instance."
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "\ud83d\udca3  However , ",
      "text": "\ud83d\udca3  However , "
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "growpart",
      "text": "growpart",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " will not  shrink  the disk at boot time. If you choose a size that is larger than the disk space in your cloud instance, you will likely see an error at provisioning time.",
      "text": " will not  shrink  the disk at boot time. If you choose a size that is larger than the disk space in your cloud instance, you will likely see an error at provisioning time."
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's check the status after a few minutes:",
      "text": "Let's check the status after a few minutes:"
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli compose status\nca57fd64-11ea-41d4-b924-9b8f5bdcaf5e FINISHED Fri May 6 16:16:08 2022 centos9         0.0.1 ami              4096",
      "text": "# composer-cli compose status\nca57fd64-11ea-41d4-b924-9b8f5bdcaf5e FINISHED Fri May 6 16:16:08 2022 centos9         0.0.1 ami              4096",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "If you want to get a copy of the image and import it yourself into your favorite cloud, you can do that now:",
      "text": "If you want to get a copy of the image and import it yourself into your favorite cloud, you can do that now:"
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli compose image ca57fd64-11ea-41d4-b924-9b8f5bdcaf5e\nca57fd64-11ea-41d4-b924-9b8f5bdcaf5e-image.raw\n# ls -alh ca57fd64-11ea-41d4-b924-9b8f5bdcaf5e-image.raw\n-rw-------. 1 root root 2.7G May  6 16:20 ca57fd64-11ea-41d4-b924-9b8f5bdcaf5e-image.raw",
      "text": "# composer-cli compose image ca57fd64-11ea-41d4-b924-9b8f5bdcaf5e\nca57fd64-11ea-41d4-b924-9b8f5bdcaf5e-image.raw\n# ls -alh ca57fd64-11ea-41d4-b924-9b8f5bdcaf5e-image.raw\n-rw-------. 1 root root 2.7G May  6 16:20 ca57fd64-11ea-41d4-b924-9b8f5bdcaf5e-image.raw",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You can also let  osbuild-composer  do this for you! I have one post on this blog about automatically uploading to AWS  and another post on the Red Hat blog about  doing the same with Azure .",
      "text": "You can also let  osbuild-composer  do this for you! I have one post on this blog about automatically uploading to AWS  and another post on the Red Hat blog about  doing the same with Azure ."
    }
  ],
  "pictures": [],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}