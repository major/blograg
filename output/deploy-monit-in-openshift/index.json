{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "myfile",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 14743487501459428916,
    "filename": "myfile.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/texts/1"
      },
      {
        "$ref": "#/texts/2"
      },
      {
        "$ref": "#/texts/3"
      },
      {
        "$ref": "#/texts/4"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/9"
      },
      {
        "$ref": "#/texts/10"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/texts/13"
      },
      {
        "$ref": "#/texts/14"
      },
      {
        "$ref": "#/texts/15"
      },
      {
        "$ref": "#/texts/16"
      },
      {
        "$ref": "#/texts/17"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/24"
      },
      {
        "$ref": "#/texts/25"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/texts/30"
      },
      {
        "$ref": "#/texts/31"
      },
      {
        "$ref": "#/texts/32"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/texts/34"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/texts/38"
      },
      {
        "$ref": "#/groups/2"
      },
      {
        "$ref": "#/texts/43"
      },
      {
        "$ref": "#/texts/44"
      },
      {
        "$ref": "#/texts/45"
      },
      {
        "$ref": "#/texts/46"
      },
      {
        "$ref": "#/texts/47"
      },
      {
        "$ref": "#/texts/48"
      },
      {
        "$ref": "#/texts/49"
      },
      {
        "$ref": "#/groups/3"
      },
      {
        "$ref": "#/texts/52"
      },
      {
        "$ref": "#/texts/53"
      },
      {
        "$ref": "#/texts/54"
      },
      {
        "$ref": "#/texts/55"
      },
      {
        "$ref": "#/texts/56"
      },
      {
        "$ref": "#/texts/57"
      },
      {
        "$ref": "#/texts/58"
      },
      {
        "$ref": "#/texts/59"
      },
      {
        "$ref": "#/texts/60"
      },
      {
        "$ref": "#/texts/61"
      },
      {
        "$ref": "#/texts/62"
      },
      {
        "$ref": "#/texts/63"
      },
      {
        "$ref": "#/texts/64"
      },
      {
        "$ref": "#/texts/65"
      },
      {
        "$ref": "#/texts/66"
      },
      {
        "$ref": "#/texts/67"
      },
      {
        "$ref": "#/texts/68"
      },
      {
        "$ref": "#/texts/69"
      },
      {
        "$ref": "#/texts/70"
      },
      {
        "$ref": "#/texts/71"
      },
      {
        "$ref": "#/texts/72"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/5"
        },
        {
          "$ref": "#/texts/6"
        },
        {
          "$ref": "#/texts/7"
        },
        {
          "$ref": "#/texts/8"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/18"
        },
        {
          "$ref": "#/texts/19"
        },
        {
          "$ref": "#/texts/20"
        },
        {
          "$ref": "#/texts/21"
        },
        {
          "$ref": "#/texts/22"
        },
        {
          "$ref": "#/texts/23"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/39"
        },
        {
          "$ref": "#/texts/40"
        },
        {
          "$ref": "#/texts/41"
        },
        {
          "$ref": "#/texts/42"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "ordered_list"
    },
    {
      "self_ref": "#/groups/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/50"
        },
        {
          "$ref": "#/texts/51"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Monit  is a tried-and-true method for monitoring all kinds of systems, services, and network endpoints. Deploying monit is easy. There's only one binary daemon to run and it reads monitoring configuration from files in a directory you specify.",
      "text": "Monit  is a tried-and-true method for monitoring all kinds of systems, services, and network endpoints. Deploying monit is easy. There's only one binary daemon to run and it reads monitoring configuration from files in a directory you specify."
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Most Linux distributions have a package for monit and the package usually contains some basic configuration along with a systemd unit file to run the daemon reliably.",
      "text": "Most Linux distributions have a package for monit and the package usually contains some basic configuration along with a systemd unit file to run the daemon reliably."
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "However, this post is all about how to deploy it inside OpenShift. Deploying monit inside OpenShift allows you to monitor services inside OpenShift that might not have a route or a NodePort configured, but you can monitor systems outside OpenShift, too.",
      "text": "However, this post is all about how to deploy it inside OpenShift. Deploying monit inside OpenShift allows you to monitor services inside OpenShift that might not have a route or a NodePort configured, but you can monitor systems outside OpenShift, too."
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Monit in a container",
      "text": "Monit in a container",
      "level": 1
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Before we can put monit into a container, we need to think about what it requires. At the most basic level, we will need:",
      "text": "Before we can put monit into a container, we need to think about what it requires. At the most basic level, we will need:"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "the monit daemon binary",
      "text": "the monit daemon binary",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "a very basic config, the ",
      "text": "a very basic config, the ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "a directory to hold lots of additional monitoring configs",
      "text": "a directory to hold lots of additional monitoring configs",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "any packages needed for running monitoring scripts",
      "text": "any packages needed for running monitoring scripts",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "In my case, some of the scripts I want to run require ",
      "text": "In my case, some of the scripts I want to run require "
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "curl",
      "text": "curl",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ", ",
      "text": ", "
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "httpie",
      "text": "httpie",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " (for complex HTTP/JSON requests), and ",
      "text": " (for complex HTTP/JSON requests), and "
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "jq",
      "text": "jq",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " (for parsing json). I've added those, along with some requirements for the monit binary, to my container build file:",
      "text": " (for parsing json). I've added those, along with some requirements for the monit binary, to my container build file:"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "FROM fedora:latest\n\n# Upgrade packages and install monit.\nRUN dnf -y upgrade\nRUN dnf -y install coreutils httpie jq libnsl libxcrypt-compat\nRUN dnf clean all\n\n# Install monit.\nRUN curl -Lso /tmp/monit.tgz https://bitbucket.org/tildeslash/monit/downloads/monit-5.26.0-linux-x64.tar.gz\nRUN cd /tmp && tar xf monit.tgz\nRUN mv /tmp/monit-*/bin/monit /usr/local/bin/monit\nRUN rm -rf /tmp/monit*\n\n# Remove monit user/group.\nRUN sed -i '/^monit/d' /etc/passwd\nRUN sed -i '/^monit/d' /etc/group\n\n# Work around OpenShift's arbitrary UID/GIDs.\nRUN chmod g=u /etc/passwd /etc/group\n\n# The monit server listens on 2812.\nEXPOSE 2812\n\n# Set up a volume for /config.\nVOLUME [\"/config\"]\n\n# Start monit when the container starts.\nENV HOME=/tmp\nCOPY extras/start.sh /opt/start.sh\nRUN chmod +x /opt/start.sh\nCMD [\"/opt/start.sh\"]",
      "text": "FROM fedora:latest\n\n# Upgrade packages and install monit.\nRUN dnf -y upgrade\nRUN dnf -y install coreutils httpie jq libnsl libxcrypt-compat\nRUN dnf clean all\n\n# Install monit.\nRUN curl -Lso /tmp/monit.tgz https://bitbucket.org/tildeslash/monit/downloads/monit-5.26.0-linux-x64.tar.gz\nRUN cd /tmp && tar xf monit.tgz\nRUN mv /tmp/monit-*/bin/monit /usr/local/bin/monit\nRUN rm -rf /tmp/monit*\n\n# Remove monit user/group.\nRUN sed -i '/^monit/d' /etc/passwd\nRUN sed -i '/^monit/d' /etc/group\n\n# Work around OpenShift's arbitrary UID/GIDs.\nRUN chmod g=u /etc/passwd /etc/group\n\n# The monit server listens on 2812.\nEXPOSE 2812\n\n# Set up a volume for /config.\nVOLUME [\"/config\"]\n\n# Start monit when the container starts.\nENV HOME=/tmp\nCOPY extras/start.sh /opt/start.sh\nRUN chmod +x /opt/start.sh\nCMD [\"/opt/start.sh\"]",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's break down what's here in the container build file:",
      "text": "Let's break down what's here in the container build file:"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Install some basic packages that we need in the container",
      "text": "Install some basic packages that we need in the container",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Download monit and install it to ",
      "text": "Download monit and install it to ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Remove the ",
      "text": "Remove the ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Make ",
      "text": "Make ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Expose the default monit port",
      "text": "Expose the default monit port",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Run our special startup script",
      "text": "Run our special startup script",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The last three parts help us run with OpenShift's strict security requirements.",
      "text": "The last three parts help us run with OpenShift's strict security requirements."
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Startup script",
      "text": "Startup script",
      "level": 1
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Monit has some strict security requirements for startup. It requires that the monit daemon is started with the same user/group combination that owns the initial configuration file (",
      "text": "Monit has some strict security requirements for startup. It requires that the monit daemon is started with the same user/group combination that owns the initial configuration file ("
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": ".monitrc",
      "text": ".monitrc",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "). That's why we removed the ",
      "text": "). That's why we removed the "
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "monit",
      "text": "monit",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "user/group  and  made ",
      "text": "user/group  and  made "
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/etc/passwd",
      "text": "/etc/passwd",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " and ",
      "text": " and "
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/etc/shadow",
      "text": "/etc/shadow",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " writable during the build step. We need to add those back in once the container starts and we've received our arbitrary UID from OpenShift.",
      "text": " writable during the build step. We need to add those back in once the container starts and we've received our arbitrary UID from OpenShift."
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "(For more on OpenShift's arbitrary UIDs, read my other post about  Running Ansible in OpenShift with arbitrary UIDs .)",
      "text": "(For more on OpenShift's arbitrary UIDs, read my other post about  Running Ansible in OpenShift with arbitrary UIDs .)"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Here's the startup script:",
      "text": "Here's the startup script:"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "#!/bin/bash\nset -euxo pipefail\n\necho \"The home directory is: ${HOME}\"\n\n# Work around OpenShift's arbitrary UID/GIDs.\nif [ -w '/etc/passwd' ]; then\n    echo \"monit:x:`id -u`:`id -g`:,,,:${HOME}:/bin/bash\" >> /etc/passwd\nfi\nif [ -w '/etc/group' ]; then\n    echo \"monit:x:$(id -G | cut -d' ' -f 2)\" >> /etc/group\nfi\n\n# Make a basic monitrc.\necho \"set daemon 30\" >> \"${HOME}\"/monitrc\necho \"include /config/*\" >> \"${HOME}\"/monitrc\nchmod 0700 \"${HOME}\"/monitrc\n\n# Ensure the UID/GID mapping works.\nid\n\n# Run monit.\n/usr/local/bin/monit -v -I -c \"${HOME}\"/monitrc",
      "text": "#!/bin/bash\nset -euxo pipefail\n\necho \"The home directory is: ${HOME}\"\n\n# Work around OpenShift's arbitrary UID/GIDs.\nif [ -w '/etc/passwd' ]; then\n    echo \"monit:x:`id -u`:`id -g`:,,,:${HOME}:/bin/bash\" >> /etc/passwd\nfi\nif [ -w '/etc/group' ]; then\n    echo \"monit:x:$(id -G | cut -d' ' -f 2)\" >> /etc/group\nfi\n\n# Make a basic monitrc.\necho \"set daemon 30\" >> \"${HOME}\"/monitrc\necho \"include /config/*\" >> \"${HOME}\"/monitrc\nchmod 0700 \"${HOME}\"/monitrc\n\n# Ensure the UID/GID mapping works.\nid\n\n# Run monit.\n/usr/local/bin/monit -v -I -c \"${HOME}\"/monitrc",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Let's talk about what is happening in the script:",
      "text": "Let's talk about what is happening in the script:"
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Add the ",
      "text": "Add the ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Do the same for the ",
      "text": "Do the same for the ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Create a very basic ",
      "text": "Create a very basic ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Run ",
      "text": "Run ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "OpenShift will make an emptyDir volume in ",
      "text": "OpenShift will make an emptyDir volume in "
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "/config",
      "text": "/config",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " that we can modify since we specified a volume in the container build file.",
      "text": " that we can modify since we specified a volume in the container build file."
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Deploying monit",
      "text": "Deploying monit",
      "level": 1
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Now that we have a container and a startup script, it's time to deploy monit in OpenShift.",
      "text": "Now that we have a container and a startup script, it's time to deploy monit in OpenShift."
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "apiVersion: apps.openshift.io/v1\nkind: DeploymentConfig\nmetadata:\n  generation: 1\n  labels:\n    app: monit\n  name: monit\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    app: monit\n    deploymentconfig: monit\n  strategy:\n    activeDeadlineSeconds: 21600\n    resources: {}\n    rollingParams:\n      intervalSeconds: 1\n      maxSurge: 25%\n      maxUnavailable: 25%\n      timeoutSeconds: 600\n      updatePeriodSeconds: 1\n    type: Rolling\n  template:\n    metadata:\n      labels:\n        app: monit\n        deploymentconfig: monit\n    spec:\n      containers:\n      - image: registry.gitlab.com/majorhayden/container-monit/monit:latest\n        imagePullPolicy: Always\n        name: monit\n        resources:\n          limits:\n            cpu: 100m\n            memory: 512Mi\n          requests:\n            cpu: 100m\n            memory: 512Mi\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /config\n          name: monit-config\n        - mountPath: /scripts\n          name: monit-scripts\n      dnsPolicy: ClusterFirst\n      hostname: monit-in-openshift\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext: {}\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - configMap:\n          defaultMode: 0420\n          name: monit-config\n        name: monit-config\n      - configMap:\n          defaultMode: 0755\n          name: monit-scripts\n        name: monit-scripts\n  test: false\n  triggers:\n  - type: ConfigChange",
      "text": "apiVersion: apps.openshift.io/v1\nkind: DeploymentConfig\nmetadata:\n  generation: 1\n  labels:\n    app: monit\n  name: monit\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    app: monit\n    deploymentconfig: monit\n  strategy:\n    activeDeadlineSeconds: 21600\n    resources: {}\n    rollingParams:\n      intervalSeconds: 1\n      maxSurge: 25%\n      maxUnavailable: 25%\n      timeoutSeconds: 600\n      updatePeriodSeconds: 1\n    type: Rolling\n  template:\n    metadata:\n      labels:\n        app: monit\n        deploymentconfig: monit\n    spec:\n      containers:\n      - image: registry.gitlab.com/majorhayden/container-monit/monit:latest\n        imagePullPolicy: Always\n        name: monit\n        resources:\n          limits:\n            cpu: 100m\n            memory: 512Mi\n          requests:\n            cpu: 100m\n            memory: 512Mi\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /config\n          name: monit-config\n        - mountPath: /scripts\n          name: monit-scripts\n      dnsPolicy: ClusterFirst\n      hostname: monit-in-openshift\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext: {}\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - configMap:\n          defaultMode: 0420\n          name: monit-config\n        name: monit-config\n      - configMap:\n          defaultMode: 0755\n          name: monit-scripts\n        name: monit-scripts\n  test: false\n  triggers:\n  - type: ConfigChange",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "There is a lot of text here, but there are two important parts:",
      "text": "There is a lot of text here, but there are two important parts:"
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "The container ",
      "text": "The container ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "The ",
      "text": "The ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Next comes the service (which allows the monit web port to be exposed inside the OpenShift cluster):",
      "text": "Next comes the service (which allows the monit web port to be exposed inside the OpenShift cluster):"
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: monit\n  name: monit\nspec:\n  ports:\n  - port: 2812\n    protocol: TCP\n    targetPort: 2812\n  selector:\n    app: monit\n    deploymentconfig: monit\n  sessionAffinity: None\n  type: ClusterIP",
      "text": "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: monit\n  name: monit\nspec:\n  ports:\n  - port: 2812\n    protocol: TCP\n    targetPort: 2812\n  selector:\n    app: monit\n    deploymentconfig: monit\n  sessionAffinity: None\n  type: ClusterIP",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "And finally, the route (which exposes the monit web port service  outside  the OpenShift cluster):",
      "text": "And finally, the route (which exposes the monit web port service  outside  the OpenShift cluster):"
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "apiVersion: route.openshift.io/v1\nkind: Route\nmetadata:\n  labels:\n    app: monit\n  name: monit\nspec:\n  tls:\n    insecureEdgeTerminationPolicy: Redirect\n    termination: edge\n  host: monit.openshift.example.com\n  to:\n    kind: Service\n    name: monit\n    weight: 100\n  wildcardPolicy: None",
      "text": "apiVersion: route.openshift.io/v1\nkind: Route\nmetadata:\n  labels:\n    app: monit\n  name: monit\nspec:\n  tls:\n    insecureEdgeTerminationPolicy: Redirect\n    termination: edge\n  host: monit.openshift.example.com\n  to:\n    kind: Service\n    name: monit\n    weight: 100\n  wildcardPolicy: None",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Monitoring configuration and scripts",
      "text": "Monitoring configuration and scripts",
      "level": 1
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The deploymentConfig for monit refers to a configMap called ",
      "text": "The deploymentConfig for monit refers to a configMap called "
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "monit-config",
      "text": "monit-config",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ". This config map contains all of the additional monitoring configuration for monit outside of the ",
      "text": ". This config map contains all of the additional monitoring configuration for monit outside of the "
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": ".monitrc",
      "text": ".monitrc",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ". Here is a basic configMap for checking that",
      "text": ". Here is a basic configMap for checking that"
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "icanhazheaders.com",
      "text": "icanhazheaders.com",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/63",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " is accessible:",
      "text": " is accessible:"
    },
    {
      "self_ref": "#/texts/64",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: monit-config\ndata:\n  config: |\n    set daemon 30\n    set httpd port 2812\n      allow 0.0.0.0/0\n    set alert me@example.com\n    set mailserver smtp.example.com\n\n    check host \"icanhazheaders responding\" with address icanhazheaders.com\n      if failed\n        port 80\n        for 2 cycles\n      then alert\n\n    check program \"icanhazheaders header check\"\n      with path \"/scripts/header-check.sh ACCEPT-ENCODING 'gzip'\"\n      if status gt 0\n        then exec \"/scripts/irc-notification.sh\"\n        else if succeeded then exec \"/scripts/irc-notification.sh\"",
      "text": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: monit-config\ndata:\n  config: |\n    set daemon 30\n    set httpd port 2812\n      allow 0.0.0.0/0\n    set alert me@example.com\n    set mailserver smtp.example.com\n\n    check host \"icanhazheaders responding\" with address icanhazheaders.com\n      if failed\n        port 80\n        for 2 cycles\n      then alert\n\n    check program \"icanhazheaders header check\"\n      with path \"/scripts/header-check.sh ACCEPT-ENCODING 'gzip'\"\n      if status gt 0\n        then exec \"/scripts/irc-notification.sh\"\n        else if succeeded then exec \"/scripts/irc-notification.sh\"",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/65",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This configuration will check ",
      "text": "This configuration will check "
    },
    {
      "self_ref": "#/texts/66",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "icanhazheaders.com",
      "text": "icanhazheaders.com",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/67",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " and only alert if the check fails for two check periods. Each check period is 30 seconds, so the site would need to be inaccessible for 60 seconds before an alert would be sent.",
      "text": " and only alert if the check fails for two check periods. Each check period is 30 seconds, so the site would need to be inaccessible for 60 seconds before an alert would be sent."
    },
    {
      "self_ref": "#/texts/68",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Also, there is a second check that runs a script. Let's deploy the script to OpenShift as well:",
      "text": "Also, there is a second check that runs a script. Let's deploy the script to OpenShift as well:"
    },
    {
      "self_ref": "#/texts/69",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: monit-scripts\ndata:\n  header-check.sh: |\n    #!/bin/bash\n    set -euo pipefail\n\n    URL=\"http://icanhazheaders.com\"\n    HEADER=$1\n    EXPECTED_VALUE=$2\n\n    HEADER_VALUE=$(curl -s ${URL} | jq -r ${HEADER})\n\n    if [[ $HEADER_VALUE == $EXPECTED_VALUE ]]; then\n      exit 0\n    else\n      exit 1\n    fi",
      "text": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: monit-scripts\ndata:\n  header-check.sh: |\n    #!/bin/bash\n    set -euo pipefail\n\n    URL=\"http://icanhazheaders.com\"\n    HEADER=$1\n    EXPECTED_VALUE=$2\n\n    HEADER_VALUE=$(curl -s ${URL} | jq -r ${HEADER})\n\n    if [[ $HEADER_VALUE == $EXPECTED_VALUE ]]; then\n      exit 0\n    else\n      exit 1\n    fi",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/70",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Use ",
      "text": "Use "
    },
    {
      "self_ref": "#/texts/71",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "oc apply",
      "text": "oc apply",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/72",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " to deploy all of these YAML files to your OpenShift cluster and monit should be up and running within seconds!",
      "text": " to deploy all of these YAML files to your OpenShift cluster and monit should be up and running within seconds!"
    }
  ],
  "pictures": [],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}