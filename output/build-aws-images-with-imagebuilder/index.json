{
  "schema_name": "DoclingDocument",
  "version": "1.4.0",
  "name": "index",
  "origin": {
    "mimetype": "text/markdown",
    "binary_hash": 15098342342788044082,
    "filename": "index.md"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/6"
      },
      {
        "$ref": "#/texts/7"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/11"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/texts/13"
      },
      {
        "$ref": "#/groups/2"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/22"
      },
      {
        "$ref": "#/texts/23"
      },
      {
        "$ref": "#/groups/3"
      },
      {
        "$ref": "#/texts/26"
      },
      {
        "$ref": "#/texts/27"
      },
      {
        "$ref": "#/texts/28"
      },
      {
        "$ref": "#/texts/29"
      },
      {
        "$ref": "#/texts/30"
      },
      {
        "$ref": "#/texts/31"
      },
      {
        "$ref": "#/texts/32"
      },
      {
        "$ref": "#/texts/33"
      },
      {
        "$ref": "#/texts/34"
      },
      {
        "$ref": "#/texts/35"
      },
      {
        "$ref": "#/texts/36"
      },
      {
        "$ref": "#/texts/37"
      },
      {
        "$ref": "#/texts/38"
      },
      {
        "$ref": "#/texts/39"
      },
      {
        "$ref": "#/texts/40"
      },
      {
        "$ref": "#/groups/4"
      },
      {
        "$ref": "#/texts/45"
      },
      {
        "$ref": "#/texts/46"
      },
      {
        "$ref": "#/texts/47"
      },
      {
        "$ref": "#/texts/48"
      },
      {
        "$ref": "#/texts/49"
      },
      {
        "$ref": "#/texts/50"
      },
      {
        "$ref": "#/texts/51"
      },
      {
        "$ref": "#/texts/52"
      },
      {
        "$ref": "#/texts/53"
      },
      {
        "$ref": "#/texts/54"
      },
      {
        "$ref": "#/texts/55"
      },
      {
        "$ref": "#/texts/56"
      },
      {
        "$ref": "#/texts/57"
      },
      {
        "$ref": "#/texts/58"
      },
      {
        "$ref": "#/texts/59"
      },
      {
        "$ref": "#/texts/60"
      },
      {
        "$ref": "#/texts/61"
      },
      {
        "$ref": "#/texts/62"
      },
      {
        "$ref": "#/texts/63"
      },
      {
        "$ref": "#/texts/64"
      },
      {
        "$ref": "#/texts/65"
      },
      {
        "$ref": "#/texts/66"
      },
      {
        "$ref": "#/texts/67"
      },
      {
        "$ref": "#/texts/68"
      },
      {
        "$ref": "#/texts/69"
      },
      {
        "$ref": "#/texts/70"
      },
      {
        "$ref": "#/texts/71"
      },
      {
        "$ref": "#/texts/72"
      },
      {
        "$ref": "#/texts/73"
      },
      {
        "$ref": "#/texts/74"
      },
      {
        "$ref": "#/texts/75"
      },
      {
        "$ref": "#/texts/76"
      },
      {
        "$ref": "#/texts/77"
      },
      {
        "$ref": "#/texts/78"
      },
      {
        "$ref": "#/texts/79"
      },
      {
        "$ref": "#/texts/80"
      },
      {
        "$ref": "#/texts/81"
      },
      {
        "$ref": "#/texts/82"
      },
      {
        "$ref": "#/texts/83"
      },
      {
        "$ref": "#/texts/84"
      },
      {
        "$ref": "#/texts/85"
      },
      {
        "$ref": "#/texts/86"
      },
      {
        "$ref": "#/texts/87"
      },
      {
        "$ref": "#/texts/88"
      },
      {
        "$ref": "#/texts/89"
      },
      {
        "$ref": "#/texts/90"
      },
      {
        "$ref": "#/texts/91"
      },
      {
        "$ref": "#/texts/92"
      },
      {
        "$ref": "#/texts/93"
      },
      {
        "$ref": "#/texts/94"
      },
      {
        "$ref": "#/texts/95"
      },
      {
        "$ref": "#/texts/96"
      },
      {
        "$ref": "#/texts/97"
      },
      {
        "$ref": "#/texts/98"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/1"
        },
        {
          "$ref": "#/texts/2"
        },
        {
          "$ref": "#/texts/3"
        },
        {
          "$ref": "#/texts/4"
        },
        {
          "$ref": "#/texts/5"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/8"
        },
        {
          "$ref": "#/texts/9"
        },
        {
          "$ref": "#/texts/10"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "ordered_list"
    },
    {
      "self_ref": "#/groups/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/14"
        },
        {
          "$ref": "#/texts/15"
        },
        {
          "$ref": "#/texts/16"
        },
        {
          "$ref": "#/texts/17"
        },
        {
          "$ref": "#/texts/18"
        },
        {
          "$ref": "#/texts/19"
        },
        {
          "$ref": "#/texts/20"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "ordered_list"
    },
    {
      "self_ref": "#/groups/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/24"
        },
        {
          "$ref": "#/texts/25"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/4",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/41"
        },
        {
          "$ref": "#/texts/42"
        },
        {
          "$ref": "#/texts/43"
        },
        {
          "$ref": "#/texts/44"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "aliases:",
      "text": "aliases:"
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "/2020/06/19/build-aws-images-with-imagebuilder/",
      "text": "/2020/06/19/build-aws-images-with-imagebuilder/",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "aws",
      "text": "aws",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "cloud",
      "text": "cloud",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "fedora",
      "text": "fedora",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "linux",
      "text": "linux",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The AMIs provided by most Linux distributions in AWS work well for most use cases. However, there are those times when you need a customized image to support a certain configuration or to speed up CI processes.",
      "text": "The AMIs provided by most Linux distributions in AWS work well for most use cases. However, there are those times when you need a customized image to support a certain configuration or to speed up CI processes."
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You can get a customized image via a few methods:",
      "text": "You can get a customized image via a few methods:"
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Build from an existing AMI, customize it, and snapshot it.",
      "text": "Build from an existing AMI, customize it, and snapshot it.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Use an automated tool, such as Packer, to automate #1.",
      "text": "Use an automated tool, such as Packer, to automate #1.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Build your own image locally in KVM, VMware, or Virtualbox and upload the",
      "text": "Build your own image locally in KVM, VMware, or Virtualbox and upload the",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "My preferred option is the last method since the installation happens locally and the image is first booted in AWS. This ensures that log files and configurations are clean on first boot. Although this method produces the best result, it has plenty of steps that can go wrong.",
      "text": "My preferred option is the last method since the installation happens locally and the image is first booted in AWS. This ensures that log files and configurations are clean on first boot. Although this method produces the best result, it has plenty of steps that can go wrong."
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Importing an image into AWS (the hard way)",
      "text": "Importing an image into AWS (the hard way)",
      "level": 1
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "AWS has  documentation for importing an image  and the basic steps include:",
      "text": "AWS has  documentation for importing an image  and the basic steps include:"
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Install into a VM locally and customize it.",
      "text": "Install into a VM locally and customize it.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Snapshot the image and upload it into an S3 bucket.",
      "text": "Snapshot the image and upload it into an S3 bucket.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Create an IAM role for ",
      "text": "Create an IAM role for ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Run ",
      "text": "Run ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Monitor the output of ",
      "text": "Monitor the output of ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Get the snapshot ID from the import.",
      "text": "Get the snapshot ID from the import.",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Run ",
      "text": "Run ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "This is a lot of manual work. \ud83d\ude29",
      "text": "This is a lot of manual work. \ud83d\ude29"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Using Image Builder to make images",
      "text": "Using Image Builder to make images",
      "level": 1
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Image Builder has two main components:",
      "text": "Image Builder has two main components:"
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "[<RawText children='osbuild-composer'>]",
      "text": "[<RawText children='osbuild-composer'>]",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "[<RawText children='osbuild'>]",
      "text": "[<RawText children='osbuild'>]",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The support for uploading to clouds first arrived in Fedora 32 and this post will use that release for generating images.",
      "text": "The support for uploading to clouds first arrived in Fedora 32 and this post will use that release for generating images."
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "To get started, install ",
      "text": "To get started, install "
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "osbuild-composer",
      "text": "osbuild-composer",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " along with ",
      "text": " along with "
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "composer-cli",
      "text": "composer-cli",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ", a command line interface to create images. Start the socket for",
      "text": ", a command line interface to create images. Start the socket for"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "osbuild-composer",
      "text": "osbuild-composer",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " as well:",
      "text": " as well:"
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# dnf -y install composer-cli osbuild-composer\n# systemctl enable --now osbuild-composer.socket",
      "text": "# dnf -y install composer-cli osbuild-composer\n# systemctl enable --now osbuild-composer.socket",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Verify that everything is working:",
      "text": "Verify that everything is working:"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli sources list\nfedora\nupdates\nfedora-modular\nupdates-modular",
      "text": "# composer-cli sources list\nfedora\nupdates\nfedora-modular\nupdates-modular",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We now need an image blueprint. A blueprint is a TOML file that provides some basic specifications for the image, such as which packages to install, which services should start at boot time, and the system's time zone. Refer to the Lorax composer documentation  for a full list of options.",
      "text": "We now need an image blueprint. A blueprint is a TOML file that provides some basic specifications for the image, such as which packages to install, which services should start at boot time, and the system's time zone. Refer to the Lorax composer documentation  for a full list of options."
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "In this example, we will build a small image with nginx to serve a website. Here's the TOML file:",
      "text": "In this example, we will build a small image with nginx to serve a website. Here's the TOML file:"
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "name = \"aws-nginx\"\ndescription = \"AWS nginx image\"\nversion = \"0.0.1\"\n\n[[packages]]\nname = \"chrony\"\n\n[[packages]]\nname = \"cloud-utils-growpart\"\n\n[[packages]]\nname = \"nginx\"\n\n[customizations.kernel]\nappend = \"no_timer_check console=hvc0 LANG=en_US.UTF-8\"\n\n[customizations.services]\nenabled = [\"chronyd\", \"nginx\"]\n\n[customizations.timezone]\ntimezome = \"UTC\"",
      "text": "name = \"aws-nginx\"\ndescription = \"AWS nginx image\"\nversion = \"0.0.1\"\n\n[[packages]]\nname = \"chrony\"\n\n[[packages]]\nname = \"cloud-utils-growpart\"\n\n[[packages]]\nname = \"nginx\"\n\n[customizations.kernel]\nappend = \"no_timer_check console=hvc0 LANG=en_US.UTF-8\"\n\n[customizations.services]\nenabled = [\"chronyd\", \"nginx\"]\n\n[customizations.timezone]\ntimezome = \"UTC\"",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Our specification says:",
      "text": "Our specification says:"
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Build an image with ",
      "text": "Build an image with ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Install ",
      "text": "Install ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Install ",
      "text": "Install ",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Add some kernel boot parameters to ensure the serial console works in AWS",
      "text": "Add some kernel boot parameters to ensure the serial console works in AWS",
      "enumerated": false,
      "marker": "-"
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Push the blueprint into ",
      "text": "Push the blueprint into "
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "osbuild-composer",
      "text": "osbuild-composer",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " and ensure the packages are available. (The ",
      "text": " and ensure the packages are available. (The "
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "depsolve",
      "text": "depsolve",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " check is optional, but I recommend it so you can find any typos in your package names.)",
      "text": " check is optional, but I recommend it so you can find any typos in your package names.)"
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli blueprints push aws-image.toml\n# composer-cli blueprints depsolve aws-nginx\nblueprint: aws-nginx v0.0.1\n    acl-2.2.53-5.fc32.x86_64\n    alternatives-1.11-6.fc32.x86_64\n    audit-libs-3.0-0.19.20191104git1c2f876.fc32.x86_64\n    ...",
      "text": "# composer-cli blueprints push aws-image.toml\n# composer-cli blueprints depsolve aws-nginx\nblueprint: aws-nginx v0.0.1\n    acl-2.2.53-5.fc32.x86_64\n    alternatives-1.11-6.fc32.x86_64\n    audit-libs-3.0-0.19.20191104git1c2f876.fc32.x86_64\n    ...",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We can now build the image:",
      "text": "We can now build the image:"
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli --json compose start aws-nginx ami\n{\n    \"build_id\": \"285c1ee8-6b9e-4725-9c4c-346eafae86de\",\n    \"status\": true\n}\n# composer-cli --json compose status 285c1ee8-6b9e-4725-9c4c-346eafae86de\n[\n    {\n        \"id\": \"285c1ee8-6b9e-4725-9c4c-346eafae86de\",\n        \"blueprint\": \"aws-nginx\",\n        \"version\": \"0.0.1\",\n        \"compose_type\": \"ami\",\n        \"image_size\": 0,\n        \"status\": \"RUNNING\",\n        \"created\": 1592578852.962228,\n        \"started\": 1592578852.987541,\n        \"finished\": null\n    }\n]",
      "text": "# composer-cli --json compose start aws-nginx ami\n{\n    \"build_id\": \"285c1ee8-6b9e-4725-9c4c-346eafae86de\",\n    \"status\": true\n}\n# composer-cli --json compose status 285c1ee8-6b9e-4725-9c4c-346eafae86de\n[\n    {\n        \"id\": \"285c1ee8-6b9e-4725-9c4c-346eafae86de\",\n        \"blueprint\": \"aws-nginx\",\n        \"version\": \"0.0.1\",\n        \"compose_type\": \"ami\",\n        \"image_size\": 0,\n        \"status\": \"RUNNING\",\n        \"created\": 1592578852.962228,\n        \"started\": 1592578852.987541,\n        \"finished\": null\n    }\n]",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Our image is building! After a few minutes, the image is ready:",
      "text": "Our image is building! After a few minutes, the image is ready:"
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli --json compose status 285c1ee8-6b9e-4725-9c4c-346eafae86de\n[\n    {\n        \"id\": \"285c1ee8-6b9e-4725-9c4c-346eafae86de\",\n        \"blueprint\": \"aws-nginx\",\n        \"version\": \"0.0.1\",\n        \"compose_type\": \"ami\",\n        \"image_size\": 6442450944,\n        \"status\": \"FINISHED\",\n        \"created\": 1592578852.962228,\n        \"started\": 1592578852.987541,\n        \"finished\": 1592579061.3364012\n    }\n]\n# composer-cli compose image 285c1ee8-6b9e-4725-9c4c-346eafae86de\n285c1ee8-6b9e-4725-9c4c-346eafae86de-image.vhdx: 1304.00 MB\n# ls -alh 285c1ee8-6b9e-4725-9c4c-346eafae86de-image.vhdx\n-rw-r--r--. 1 root root 1.3G Jun 19 15:12 285c1ee8-6b9e-4725-9c4c-346eafae86de-image.vhdx",
      "text": "# composer-cli --json compose status 285c1ee8-6b9e-4725-9c4c-346eafae86de\n[\n    {\n        \"id\": \"285c1ee8-6b9e-4725-9c4c-346eafae86de\",\n        \"blueprint\": \"aws-nginx\",\n        \"version\": \"0.0.1\",\n        \"compose_type\": \"ami\",\n        \"image_size\": 6442450944,\n        \"status\": \"FINISHED\",\n        \"created\": 1592578852.962228,\n        \"started\": 1592578852.987541,\n        \"finished\": 1592579061.3364012\n    }\n]\n# composer-cli compose image 285c1ee8-6b9e-4725-9c4c-346eafae86de\n285c1ee8-6b9e-4725-9c4c-346eafae86de-image.vhdx: 1304.00 MB\n# ls -alh 285c1ee8-6b9e-4725-9c4c-346eafae86de-image.vhdx\n-rw-r--r--. 1 root root 1.3G Jun 19 15:12 285c1ee8-6b9e-4725-9c4c-346eafae86de-image.vhdx",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We can take this image, upload it to S3 and import it into AWS using the process mentioned earlier in this post. Or, we can have osbuild-composer do this for us.",
      "text": "We can take this image, upload it to S3 and import it into AWS using the process mentioned earlier in this post. Or, we can have osbuild-composer do this for us."
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Preparing for automatic AWS upload",
      "text": "Preparing for automatic AWS upload",
      "level": 1
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Start by making a bucket in S3 in your preferred region. Mine is called",
      "text": "Start by making a bucket in S3 in your preferred region. Mine is called"
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "mhayden-image-uploads",
      "text": "mhayden-image-uploads",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ":",
      "text": ":"
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# aws --region us-east-2 s3 mb s3://mhayden-image-uploads\nmake_bucket: mhayden-image-uploads",
      "text": "# aws --region us-east-2 s3 mb s3://mhayden-image-uploads\nmake_bucket: mhayden-image-uploads",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Now we need a role that allows EC2 to import images for us. Save this file as",
      "text": "Now we need a role that allows EC2 to import images for us. Save this file as"
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "vmimport.json",
      "text": "vmimport.json",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/63",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ":",
      "text": ":"
    },
    {
      "self_ref": "#/texts/64",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n         \"Effect\": \"Allow\",\n         \"Principal\": { \"Service\": \"vmie.amazonaws.com\" },\n         \"Action\": \"sts:AssumeRole\",\n         \"Condition\": {\n            \"StringEquals\":{\n               \"sts:Externalid\": \"vmimport\"\n            }\n         }\n      }\n   ]\n}",
      "text": "{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n         \"Effect\": \"Allow\",\n         \"Principal\": { \"Service\": \"vmie.amazonaws.com\" },\n         \"Action\": \"sts:AssumeRole\",\n         \"Condition\": {\n            \"StringEquals\":{\n               \"sts:Externalid\": \"vmimport\"\n            }\n         }\n      }\n   ]\n}",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/65",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We now need a policy to apply to the ",
      "text": "We now need a policy to apply to the "
    },
    {
      "self_ref": "#/texts/66",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "vmimport",
      "text": "vmimport",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/67",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " role that allows EC2 to use the role to download the image, import it, and register an AMI  (replace the bucket name with your S3 bucket) . Save this as ",
      "text": " role that allows EC2 to use the role to download the image, import it, and register an AMI  (replace the bucket name with your S3 bucket) . Save this as "
    },
    {
      "self_ref": "#/texts/68",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "vmimport-policy.json",
      "text": "vmimport-policy.json",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/69",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ":",
      "text": ":"
    },
    {
      "self_ref": "#/texts/70",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "{\n   \"Version\":\"2012-10-17\",\n   \"Statement\":[\n      {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"s3:GetBucketLocation\",\n            \"s3:GetObject\",\n            \"s3:ListBucket\"\n         ],\n         \"Resource\": [\n            \"arn:aws:s3:::mhayden-image-uploads\",\n            \"arn:aws:s3:::mhayden-image-uploads/*\"\n         ]\n      },\n      {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"ec2:ModifySnapshotAttribute\",\n            \"ec2:CopySnapshot\",\n            \"ec2:RegisterImage\",\n            \"ec2:Describe*\"\n         ],\n         \"Resource\": \"*\"\n      }\n   ]\n}",
      "text": "{\n   \"Version\":\"2012-10-17\",\n   \"Statement\":[\n      {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"s3:GetBucketLocation\",\n            \"s3:GetObject\",\n            \"s3:ListBucket\"\n         ],\n         \"Resource\": [\n            \"arn:aws:s3:::mhayden-image-uploads\",\n            \"arn:aws:s3:::mhayden-image-uploads/*\"\n         ]\n      },\n      {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"ec2:ModifySnapshotAttribute\",\n            \"ec2:CopySnapshot\",\n            \"ec2:RegisterImage\",\n            \"ec2:Describe*\"\n         ],\n         \"Resource\": \"*\"\n      }\n   ]\n}",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/71",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Add the role and the policy to IAM:",
      "text": "Add the role and the policy to IAM:"
    },
    {
      "self_ref": "#/texts/72",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# aws iam create-role --role-name vmimport \\\n    --assume-role-policy-document \"file://vmimport.json\"\n# aws iam put-role-policy --role-name vmimport --policy-name vmimport \\\n    --policy-document \"file://vmimport-policy.json\"",
      "text": "# aws iam create-role --role-name vmimport \\\n    --assume-role-policy-document \"file://vmimport.json\"\n# aws iam put-role-policy --role-name vmimport --policy-name vmimport \\\n    --policy-document \"file://vmimport-policy.json\"",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/73",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Building an image with automatic upload",
      "text": "Building an image with automatic upload",
      "level": 1
    },
    {
      "self_ref": "#/texts/74",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "We can use our same TOML blueprint we created earlier and provide one additional TOML file that provides AWS configuration and credentials. Create an ",
      "text": "We can use our same TOML blueprint we created earlier and provide one additional TOML file that provides AWS configuration and credentials. Create an "
    },
    {
      "self_ref": "#/texts/75",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "aws-config.toml",
      "text": "aws-config.toml",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/76",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " file with the following content:",
      "text": " file with the following content:"
    },
    {
      "self_ref": "#/texts/77",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "provider = \"aws\"\n\n[settings]\naccessKeyID = \"***\"\nsecretAccessKey = \"***\"\nbucket = \"mhayden-image-uploads\"\nregion = \"us-east-2\"\nkey = \"fedora-32-image-from-my-blog-post\"",
      "text": "provider = \"aws\"\n\n[settings]\naccessKeyID = \"***\"\nsecretAccessKey = \"***\"\nbucket = \"mhayden-image-uploads\"\nregion = \"us-east-2\"\nkey = \"fedora-32-image-from-my-blog-post\"",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/78",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Add your AWS credentials here along with your S3 bucket, preferred AWS region, and an image key. The image key is the name applied to the snapshot and the resulting AMI.",
      "text": "Add your AWS credentials here along with your S3 bucket, preferred AWS region, and an image key. The image key is the name applied to the snapshot and the resulting AMI."
    },
    {
      "self_ref": "#/texts/79",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Now we can build our AMI and have it automatically uploaded:",
      "text": "Now we can build our AMI and have it automatically uploaded:"
    },
    {
      "self_ref": "#/texts/80",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# composer-cli --json compose start aws-nginx ami fedora-32-image-from-my-blog-post aws-config.toml\n{\n    \"build_id\": \"f343b20d-70f9-467a-9157-f9b4fc90ee87\",\n    \"status\": true\n}\n# composer-cli --json compose info f343b20d-70f9-467a-9157-f9b4fc90ee87\n{\n    \"id\": \"f343b20d-70f9-467a-9157-f9b4fc90ee87\",\n    \"config\": \"\",\n    \"blueprint\": {\n        \"name\": \"aws-nginx\",\n        \"description\": \"AWS nginx image\",\n        \"version\": \"0.0.1\",\n        \"packages\": [\n            {\n                \"name\": \"chrony\"\n            },\n            {\n                \"name\": \"cloud-utils-growpart\"\n            },\n            {\n                \"name\": \"nginx\"\n            }\n        ],\n        \"modules\": [],\n        \"groups\": [],\n        \"customizations\": {\n            \"kernel\": {\n                \"append\": \"no_timer_check console=hvc0 LANG=en_US.UTF-8\"\n            },\n            \"timezone\": {},\n            \"services\": {\n                \"enabled\": [\n                    \"chronyd\",\n                    \"nginx\"\n                ]\n            }\n        }\n    },\n    \"commit\": \"\",\n    \"deps\": {\n        \"packages\": []\n    },\n    \"compose_type\": \"ami\",\n    \"queue_status\": \"RUNNING\",\n    \"image_size\": 6442450944,\n    \"uploads\": [\n        {\n            \"uuid\": \"e747be78-87e2-48b9-b0d2-cc1bb393a9e4\",\n            \"status\": \"RUNNING\",\n            \"provider_name\": \"aws\",\n            \"image_name\": \"fedora-32-image-from-my-blog-post\",\n            \"creation_time\": 1592580775.438667,\n            \"settings\": {\n                \"region\": \"us-east-2\",\n                \"accessKeyID\": \"***\",\n                \"secretAccessKey\": \"***\",\n                \"bucket\": \"mhayden-image-uploads\",\n                \"key\": \"fedora-32-image-from-my-blog-post\"\n            }\n        }\n    ]\n}",
      "text": "# composer-cli --json compose start aws-nginx ami fedora-32-image-from-my-blog-post aws-config.toml\n{\n    \"build_id\": \"f343b20d-70f9-467a-9157-f9b4fc90ee87\",\n    \"status\": true\n}\n# composer-cli --json compose info f343b20d-70f9-467a-9157-f9b4fc90ee87\n{\n    \"id\": \"f343b20d-70f9-467a-9157-f9b4fc90ee87\",\n    \"config\": \"\",\n    \"blueprint\": {\n        \"name\": \"aws-nginx\",\n        \"description\": \"AWS nginx image\",\n        \"version\": \"0.0.1\",\n        \"packages\": [\n            {\n                \"name\": \"chrony\"\n            },\n            {\n                \"name\": \"cloud-utils-growpart\"\n            },\n            {\n                \"name\": \"nginx\"\n            }\n        ],\n        \"modules\": [],\n        \"groups\": [],\n        \"customizations\": {\n            \"kernel\": {\n                \"append\": \"no_timer_check console=hvc0 LANG=en_US.UTF-8\"\n            },\n            \"timezone\": {},\n            \"services\": {\n                \"enabled\": [\n                    \"chronyd\",\n                    \"nginx\"\n                ]\n            }\n        }\n    },\n    \"commit\": \"\",\n    \"deps\": {\n        \"packages\": []\n    },\n    \"compose_type\": \"ami\",\n    \"queue_status\": \"RUNNING\",\n    \"image_size\": 6442450944,\n    \"uploads\": [\n        {\n            \"uuid\": \"e747be78-87e2-48b9-b0d2-cc1bb393a9e4\",\n            \"status\": \"RUNNING\",\n            \"provider_name\": \"aws\",\n            \"image_name\": \"fedora-32-image-from-my-blog-post\",\n            \"creation_time\": 1592580775.438667,\n            \"settings\": {\n                \"region\": \"us-east-2\",\n                \"accessKeyID\": \"***\",\n                \"secretAccessKey\": \"***\",\n                \"bucket\": \"mhayden-image-uploads\",\n                \"key\": \"fedora-32-image-from-my-blog-post\"\n            }\n        }\n    ]\n}",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/81",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "The output now shows an ",
      "text": "The output now shows an "
    },
    {
      "self_ref": "#/texts/82",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "uploads",
      "text": "uploads",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/83",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " section with the AWS upload details included. This process may take some time, especially if your upload speed is low. You can follow along with ",
      "text": " section with the AWS upload details included. This process may take some time, especially if your upload speed is low. You can follow along with "
    },
    {
      "self_ref": "#/texts/84",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "composer-cli --json compose info",
      "text": "composer-cli --json compose info",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/85",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " or you can monitor the system journal:",
      "text": " or you can monitor the system journal:"
    },
    {
      "self_ref": "#/texts/86",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "# journalctl -af -o cat -u osbuild-worker@1.service\nRunning job f343b20d-70f9-467a-9157-f9b4fc90ee87\n2020/06/19 15:57:37 [AWS] \ud83d\ude80 Uploading image to S3: mhayden-image-uploads/fedora-32-image-from-my-blog-post\n2020/06/19 15:58:03 [AWS] \ud83d\udce5 Importing snapshot from image: mhayden-image-uploads/fedora-32-image-from-my-blog-post\n2020/06/19 15:58:03 [AWS] \u23f1 Waiting for snapshot to finish importing: import-snap-0f4baff3e1eb945a8\n2020/06/19 16:04:50 [AWS] \ud83e\uddf9 Deleting image from S3: mhayden-image-uploads/fedora-32-image-from-my-blog-post\n2020/06/19 16:04:51 [AWS] \ud83d\udccb Registering AMI from imported snapshot: snap-0cf822f1441f9e407\n2020/06/19 16:04:51 [AWS] \ud83c\udf89 AMI registered: ami-0d0873cc888ab12a2",
      "text": "# journalctl -af -o cat -u osbuild-worker@1.service\nRunning job f343b20d-70f9-467a-9157-f9b4fc90ee87\n2020/06/19 15:57:37 [AWS] \ud83d\ude80 Uploading image to S3: mhayden-image-uploads/fedora-32-image-from-my-blog-post\n2020/06/19 15:58:03 [AWS] \ud83d\udce5 Importing snapshot from image: mhayden-image-uploads/fedora-32-image-from-my-blog-post\n2020/06/19 15:58:03 [AWS] \u23f1 Waiting for snapshot to finish importing: import-snap-0f4baff3e1eb945a8\n2020/06/19 16:04:50 [AWS] \ud83e\uddf9 Deleting image from S3: mhayden-image-uploads/fedora-32-image-from-my-blog-post\n2020/06/19 16:04:51 [AWS] \ud83d\udccb Registering AMI from imported snapshot: snap-0cf822f1441f9e407\n2020/06/19 16:04:51 [AWS] \ud83c\udf89 AMI registered: ami-0d0873cc888ab12a2",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/87",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "I ran this job on a small instance at Vultr and the whole process took about 10 minutes. The AWS image import process can vary a bit, but it's usually in the range of 5-15 minutes.",
      "text": "I ran this job on a small instance at Vultr and the whole process took about 10 minutes. The AWS image import process can vary a bit, but it's usually in the range of 5-15 minutes."
    },
    {
      "self_ref": "#/texts/88",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "At this point, I can take my new AMI (in my case, it's",
      "text": "At this point, I can take my new AMI (in my case, it's"
    },
    {
      "self_ref": "#/texts/89",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "ami-0d0873cc888ab12a2",
      "text": "ami-0d0873cc888ab12a2",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/90",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": ") and build instances at EC2! \ud83c\udf89",
      "text": ") and build instances at EC2! \ud83c\udf89"
    },
    {
      "self_ref": "#/texts/91",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Wrapping up",
      "text": "Wrapping up",
      "level": 1
    },
    {
      "self_ref": "#/texts/92",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Although there is some work involved in laying the groundwork for importing images into EC2, this work only needs to be done one time. You can re-use your existing AWS credentials TOML file over and over for new images that are made from different blueprints.",
      "text": "Although there is some work involved in laying the groundwork for importing images into EC2, this work only needs to be done one time. You can re-use your existing AWS credentials TOML file over and over for new images that are made from different blueprints."
    },
    {
      "self_ref": "#/texts/93",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "You can also do almost all of this work via the  cockpit web interface  using the ",
      "text": "You can also do almost all of this work via the  cockpit web interface  using the "
    },
    {
      "self_ref": "#/texts/94",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "cockpit-composer",
      "text": "cockpit-composer",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/95",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " package if you prefer. The only downside to that method is that some image customizations cannot be made through cockpit and some TOML blueprint editing with ",
      "text": " package if you prefer. The only downside to that method is that some image customizations cannot be made through cockpit and some TOML blueprint editing with "
    },
    {
      "self_ref": "#/texts/96",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "composer-cli",
      "text": "composer-cli",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/97",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": " is needed. Look for that in a future blog post.",
      "text": " is needed. Look for that in a future blog post."
    },
    {
      "self_ref": "#/texts/98",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "body",
      "label": "paragraph",
      "prov": [],
      "orig": "Photo credit:  Wikimedia Commons",
      "text": "Photo credit:  Wikimedia Commons"
    }
  ],
  "pictures": [],
  "tables": [],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}